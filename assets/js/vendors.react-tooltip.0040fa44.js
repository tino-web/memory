(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{30:function(t,e,o){"use strict";var r=o(1),n=o.n(r),i=o(2),a=o.n(i),s="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),l=new Uint8Array(16);function p(){if(!s)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return s(l)}for(var u=[],c=0;c<256;++c)u[c]=(c+256).toString(16).substr(1);var d=function(t,e){var o=e||0,r=u;return[r[t[o++]],r[t[o++]],r[t[o++]],r[t[o++]],"-",r[t[o++]],r[t[o++]],"-",r[t[o++]],r[t[o++]],"-",r[t[o++]],r[t[o++]],"-",r[t[o++]],r[t[o++]],r[t[o++]],r[t[o++]],r[t[o++]],r[t[o++]]].join("")};var f=function(t,e,o){var r=e&&o||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var n=(t=t||{}).random||(t.rng||p)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,e)for(var i=0;i<16;++i)e[r+i]=n[i];return e||d(n)};function h(t,e){for(var o=0;o<e.length;o++){var r=e[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function b(t,e,o){return e&&h(t.prototype,e),o&&h(t,o),t}function v(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function g(){return(g=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])}return t}).apply(this,arguments)}function m(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,r)}return o}function y(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?m(Object(o),!0).forEach((function(e){v(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):m(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function w(t){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function T(t,e){return(T=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function E(t,e){return!e||"object"!==typeof e&&"function"!==typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}var x={HIDE:"__react_tooltip_hide_event",REBUILD:"__react_tooltip_rebuild_event",SHOW:"__react_tooltip_show_event"},L=function(t,e){var o;"function"===typeof window.CustomEvent?o=new window.CustomEvent(t,{detail:e}):(o=document.createEvent("Event")).initEvent(t,!1,!0,e),window.dispatchEvent(o)};var _=function(t,e){var o=this.state.show,r=this.props.id,n=this.isCapture(e.currentTarget),i=e.currentTarget.getAttribute("currentItem");n||e.stopPropagation(),o&&"true"===i?t||this.hideTooltip(e):(e.currentTarget.setAttribute("currentItem","true"),O(e.currentTarget,this.getTargetArray(r)),this.showTooltip(e))},O=function(t,e){for(var o=0;o<e.length;o++)t!==e[o]?e[o].setAttribute("currentItem","false"):e[o].setAttribute("currentItem","true")},C={id:"9b69f92e-d3fe-498b-b1b4-c5e63a51b0cf",set:function(t,e,o){this.id in t?t[this.id][e]=o:Object.defineProperty(t,this.id,{configurable:!0,value:v({},e,o)})},get:function(t,e){var o=t[this.id];if(void 0!==o)return o[e]}};var k=function(t,e,o){var r=e.respectEffect,n=void 0!==r&&r,i=e.customEvent,a=void 0!==i&&i,s=this.props.id,l=o.target.getAttribute("data-tip")||null,p=o.target.getAttribute("data-for")||null,u=o.target;if(!this.isCustomEvent(u)||a){var c=null==s&&null==p||p===s;if(null!=l&&(!n||"float"===this.getEffect(u))&&c){var d=function(t){var e={};for(var o in t)"function"===typeof t[o]?e[o]=t[o].bind(t):e[o]=t[o];return e}(o);d.currentTarget=u,t(d)}}},S=function(t,e){var o={};return t.forEach((function(t){var r=t.getAttribute(e);r&&r.split(" ").forEach((function(t){return o[t]=!0}))})),o},A=function(){return document.getElementsByTagName("body")[0]};function R(t,e,o,r,n,i,a){for(var s=P(o),l=s.width,p=s.height,u=P(e),c=u.width,d=u.height,f=H(t,e,i),h=f.mouseX,b=f.mouseY,v=j(i,c,d,l,p),g=B(a),m=g.extraOffsetX,y=g.extraOffsetY,w=window.innerWidth,T=window.innerHeight,E=I(o),x=E.parentTop,L=E.parentLeft,_=function(t){var e=v[t].l;return h+e+m},O=function(t){var e=v[t].t;return b+e+y},C=function(t){return function(t){var e=v[t].r;return h+e+m}(t)>w},k=function(t){return function(t){var e=v[t].b;return b+e+y}(t)>T},S=function(t){return function(t){return _(t)<0}(t)||C(t)||function(t){return O(t)<0}(t)||k(t)},A=function(t){return!S(t)},R=["top","bottom","left","right"],M=[],D=0;D<4;D++){var W=R[D];A(W)&&M.push(W)}var U,z=!1,N=n!==r;return A(n)&&N?(z=!0,U=n):M.length>0&&S(n)&&S(r)&&(z=!0,U=M[0]),z?{isNewState:!0,newState:{place:U}}:{isNewState:!1,position:{left:parseInt(_(r)-L,10),top:parseInt(O(r)-x,10)}}}var P=function(t){var e=t.getBoundingClientRect(),o=e.height,r=e.width;return{height:parseInt(o,10),width:parseInt(r,10)}},H=function(t,e,o){var r=e.getBoundingClientRect(),n=r.top,i=r.left,a=P(e),s=a.width,l=a.height;return"float"===o?{mouseX:t.clientX,mouseY:t.clientY}:{mouseX:i+s/2,mouseY:n+l/2}},j=function(t,e,o,r,n){var i,a,s,l;return"float"===t?(i={l:-r/2,r:r/2,t:-(n+3+2),b:-3},s={l:-r/2,r:r/2,t:15,b:n+3+2+12},l={l:-(r+3+2),r:-3,t:-n/2,b:n/2},a={l:3,r:r+3+2,t:-n/2,b:n/2}):"solid"===t&&(i={l:-r/2,r:r/2,t:-(o/2+n+2),b:-o/2},s={l:-r/2,r:r/2,t:o/2,b:o/2+n+2},l={l:-(r+e/2+2),r:-e/2,t:-n/2,b:n/2},a={l:e/2,r:r+e/2+2,t:-n/2,b:n/2}),{top:i,bottom:s,left:l,right:a}},B=function(t){var e=0,o=0;for(var r in"[object String]"===Object.prototype.toString.apply(t)&&(t=JSON.parse(t.toString().replace(/'/g,'"'))),t)"top"===r?o-=parseInt(t[r],10):"bottom"===r?o+=parseInt(t[r],10):"left"===r?e-=parseInt(t[r],10):"right"===r&&(e+=parseInt(t[r],10));return{extraOffsetX:e,extraOffsetY:o}},I=function(t){for(var e=t;e&&"none"===window.getComputedStyle(e).getPropertyValue("transform");)e=e.parentElement;return{parentTop:e&&e.getBoundingClientRect().top||0,parentLeft:e&&e.getBoundingClientRect().left||0}};function M(t,e,o,r){if(e)return e;if(void 0!==o&&null!==o)return o;if(null===o)return null;var i=/<br\s*\/?>/;return r&&"false"!==r&&i.test(t)?t.split(i).map((function(t,e){return n.a.createElement("span",{key:e,className:"multi-line"},t)})):t}function D(t){var e={};return Object.keys(t).filter((function(t){return/(^aria-\w+$|^role$)/.test(t)})).forEach((function(o){e[o]=t[o]})),e}function W(t){var e=t.length;return t.hasOwnProperty?Array.prototype.slice.call(t):new Array(e).fill().map((function(e){return t[e]}))}!function(t){if(t&&"undefined"!==typeof window){var e=document.createElement("style");e.setAttribute("type","text/css"),e.innerHTML=t,document.head.appendChild(e)}}('.__react_component_tooltip {\n  border-radius: 3px;\n  display: inline-block;\n  font-size: 13px;\n  left: -999em;\n  opacity: 0;\n  padding: 8px 21px;\n  position: fixed;\n  pointer-events: none;\n  transition: opacity 0.3s ease-out;\n  top: -999em;\n  visibility: hidden;\n  z-index: 999;\n}\n.__react_component_tooltip.allow_hover, .__react_component_tooltip.allow_click {\n  pointer-events: auto;\n}\n.__react_component_tooltip::before, .__react_component_tooltip::after {\n  content: "";\n  width: 0;\n  height: 0;\n  position: absolute;\n}\n.__react_component_tooltip.show {\n  opacity: 0.9;\n  margin-top: 0;\n  margin-left: 0;\n  visibility: visible;\n}\n.__react_component_tooltip.place-top::before {\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  bottom: -8px;\n  left: 50%;\n  margin-left: -10px;\n}\n.__react_component_tooltip.place-bottom::before {\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  top: -8px;\n  left: 50%;\n  margin-left: -10px;\n}\n.__react_component_tooltip.place-left::before {\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  right: -8px;\n  top: 50%;\n  margin-top: -5px;\n}\n.__react_component_tooltip.place-right::before {\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  left: -8px;\n  top: 50%;\n  margin-top: -5px;\n}\n.__react_component_tooltip .multi-line {\n  display: block;\n  padding: 2px 0;\n  text-align: center;\n}');var U,z,N,F={dark:{text:"#fff",background:"#222",border:"transparent",arrow:"#222"},success:{text:"#fff",background:"#8DC572",border:"transparent",arrow:"#8DC572"},warning:{text:"#fff",background:"#F0AD4E",border:"transparent",arrow:"#F0AD4E"},error:{text:"#fff",background:"#BE6464",border:"transparent",arrow:"#BE6464"},info:{text:"#fff",background:"#337AB7",border:"transparent",arrow:"#337AB7"},light:{text:"#222",background:"#fff",border:"transparent",arrow:"#fff"}};function V(t,e,o,r){return function(t,e){var o=e.text,r=e.background,n=e.border,i=e.arrow;return"\n  \t.".concat(t," {\n\t    color: ").concat(o,";\n\t    background: ").concat(r,";\n\t    border: 1px solid ").concat(n,";\n  \t}\n\n  \t.").concat(t,".place-top {\n        margin-top: -10px;\n    }\n    .").concat(t,".place-top::before {\n        border-top: 8px solid ").concat(n,";\n    }\n    .").concat(t,".place-top::after {\n        border-left: 8px solid transparent;\n        border-right: 8px solid transparent;\n        bottom: -6px;\n        left: 50%;\n        margin-left: -8px;\n        border-top-color: ").concat(i,";\n        border-top-style: solid;\n        border-top-width: 6px;\n    }\n\n    .").concat(t,".place-bottom {\n        margin-top: 10px;\n    }\n    .").concat(t,".place-bottom::before {\n        border-bottom: 8px solid ").concat(n,";\n    }\n    .").concat(t,".place-bottom::after {\n        border-left: 8px solid transparent;\n        border-right: 8px solid transparent;\n        top: -6px;\n        left: 50%;\n        margin-left: -8px;\n        border-bottom-color: ").concat(i,";\n        border-bottom-style: solid;\n        border-bottom-width: 6px;\n    }\n\n    .").concat(t,".place-left {\n        margin-left: -10px;\n    }\n    .").concat(t,".place-left::before {\n        border-left: 8px solid ").concat(n,";\n    }\n    .").concat(t,".place-left::after {\n        border-top: 5px solid transparent;\n        border-bottom: 5px solid transparent;\n        right: -6px;\n        top: 50%;\n        margin-top: -4px;\n        border-left-color: ").concat(i,";\n        border-left-style: solid;\n        border-left-width: 6px;\n    }\n\n    .").concat(t,".place-right {\n        margin-left: 10px;\n    }\n    .").concat(t,".place-right::before {\n        border-right: 8px solid ").concat(n,";\n    }\n    .").concat(t,".place-right::after {\n        border-top: 5px solid transparent;\n        border-bottom: 5px solid transparent;\n        left: -6px;\n        top: 50%;\n        margin-top: -4px;\n        border-right-color: ").concat(i,";\n        border-right-style: solid;\n        border-right-width: 6px;\n    }\n  ")}(t,function(t,e,o){var r=t.text,n=t.background,i=t.border,a=t.arrow?t.arrow:t.background,s=function(t){return F[t]?y({},F[t]):void 0}(e);r&&(s.text=r);n&&(s.background=n);o&&(s.border=i||("light"===e?"black":"white"));a&&(s.arrow=a);return s}(e,o,r))}var X,Y=function(t){t.hide=function(t){L(x.HIDE,{target:t})},t.rebuild=function(){L(x.REBUILD)},t.show=function(t){L(x.SHOW,{target:t})},t.prototype.globalRebuild=function(){this.mount&&(this.unbindListener(),this.bindListener())},t.prototype.globalShow=function(t){if(this.mount){var e=!!(t&&t.detail&&t.detail.target);this.showTooltip({currentTarget:e&&t.detail.target},!0)}},t.prototype.globalHide=function(t){if(this.mount){var e=!!(t&&t.detail&&t.detail.target);this.hideTooltip({currentTarget:e&&t.detail.target},e)}}}(U=function(t){t.prototype.bindWindowEvents=function(t){window.removeEventListener(x.HIDE,this.globalHide),window.addEventListener(x.HIDE,this.globalHide,!1),window.removeEventListener(x.REBUILD,this.globalRebuild),window.addEventListener(x.REBUILD,this.globalRebuild,!1),window.removeEventListener(x.SHOW,this.globalShow),window.addEventListener(x.SHOW,this.globalShow,!1),t&&(window.removeEventListener("resize",this.onWindowResize),window.addEventListener("resize",this.onWindowResize,!1))},t.prototype.unbindWindowEvents=function(){window.removeEventListener(x.HIDE,this.globalHide),window.removeEventListener(x.REBUILD,this.globalRebuild),window.removeEventListener(x.SHOW,this.globalShow),window.removeEventListener("resize",this.onWindowResize)},t.prototype.onWindowResize=function(){this.mount&&this.hideTooltip()}}(U=function(t){t.prototype.isCustomEvent=function(t){return this.state.event||!!t.getAttribute("data-event")},t.prototype.customBindListener=function(t){var e=this,o=this.state,r=o.event,n=o.eventOff,i=t.getAttribute("data-event")||r,a=t.getAttribute("data-event-off")||n;i.split(" ").forEach((function(o){t.removeEventListener(o,C.get(t,o));var r=_.bind(e,a);C.set(t,o,r),t.addEventListener(o,r,!1)})),a&&a.split(" ").forEach((function(o){t.removeEventListener(o,e.hideTooltip),t.addEventListener(o,e.hideTooltip,!1)}))},t.prototype.customUnbindListener=function(t){var e=this.state,o=e.event,r=e.eventOff,n=o||t.getAttribute("data-event"),i=r||t.getAttribute("data-event-off");t.removeEventListener(n,C.get(t,o)),i&&t.removeEventListener(i,this.hideTooltip)}}(U=function(t){t.prototype.isCapture=function(t){return t&&"true"===t.getAttribute("data-iscapture")||this.props.isCapture||!1}}(U=function(t){t.prototype.getEffect=function(t){return t.getAttribute("data-effect")||this.props.effect||"float"}}(U=function(t){t.prototype.isBodyMode=function(){return!!this.props.bodyMode},t.prototype.bindBodyListener=function(t){var e=this,o=this.state,r=o.event,n=o.eventOff,i=o.possibleCustomEvents,a=o.possibleCustomEventsOff,s=A(),l=S(t,"data-event"),p=S(t,"data-event-off");null!=r&&(l[r]=!0),null!=n&&(p[n]=!0),i.split(" ").forEach((function(t){return l[t]=!0})),a.split(" ").forEach((function(t){return p[t]=!0})),this.unbindBodyListener(s);var u=this.bodyModeListeners={};for(var c in null==r&&(u.mouseover=k.bind(this,this.showTooltip,{}),u.mousemove=k.bind(this,this.updateTooltip,{respectEffect:!0}),u.mouseout=k.bind(this,this.hideTooltip,{})),l)u[c]=k.bind(this,(function(t){var o=t.currentTarget.getAttribute("data-event-off")||n;_.call(e,o,t)}),{customEvent:!0});for(var d in p)u[d]=k.bind(this,this.hideTooltip,{customEvent:!0});for(var f in u)s.addEventListener(f,u[f])},t.prototype.unbindBodyListener=function(t){t=t||A();var e=this.bodyModeListeners;for(var o in e)t.removeEventListener(o,e[o])}}((N=z=function(t){function e(t){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(o=E(this,w(e).call(this,t))).state={uuid:t.uuid||"t"+f(),place:t.place||"top",desiredPlace:t.place||"top",type:"dark",effect:"float",show:!1,border:!1,customColors:{},offset:{},extraClass:"",html:!1,delayHide:0,delayShow:0,event:t.event||null,eventOff:t.eventOff||null,currentEvent:null,currentTarget:null,ariaProps:D(t),isEmptyTip:!1,disable:!1,possibleCustomEvents:t.possibleCustomEvents||"",possibleCustomEventsOff:t.possibleCustomEventsOff||"",originTooltip:null,isMultiline:!1},o.bind(["showTooltip","updateTooltip","hideTooltip","hideTooltipOnScroll","getTooltipContent","globalRebuild","globalShow","globalHide","onWindowResize","mouseOnToolTip"]),o.mount=!0,o.delayShowLoop=null,o.delayHideLoop=null,o.delayReshow=null,o.intervalUpdateContent=null,o}return function(t,e){if("function"!==typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&T(t,e)}(e,t),b(e,null,[{key:"propTypes",get:function(){return{uuid:a.a.string,children:a.a.any,place:a.a.string,type:a.a.string,effect:a.a.string,offset:a.a.object,multiline:a.a.bool,border:a.a.bool,textColor:a.a.string,backgroundColor:a.a.string,borderColor:a.a.string,arrowColor:a.a.string,insecure:a.a.bool,class:a.a.string,className:a.a.string,id:a.a.string,html:a.a.bool,delayHide:a.a.number,delayUpdate:a.a.number,delayShow:a.a.number,event:a.a.string,eventOff:a.a.string,isCapture:a.a.bool,globalEventOff:a.a.string,getContent:a.a.any,afterShow:a.a.func,afterHide:a.a.func,overridePosition:a.a.func,disable:a.a.bool,scrollHide:a.a.bool,resizeHide:a.a.bool,wrapper:a.a.string,bodyMode:a.a.bool,possibleCustomEvents:a.a.string,possibleCustomEventsOff:a.a.string,clickable:a.a.bool}}}]),b(e,[{key:"bind",value:function(t){var e=this;t.forEach((function(t){e[t]=e[t].bind(e)}))}},{key:"componentDidMount",value:function(){var t=this.props,e=(t.insecure,t.resizeHide);this.bindListener(),this.bindWindowEvents(e)}},{key:"componentWillUnmount",value:function(){this.mount=!1,this.clearTimer(),this.unbindListener(),this.removeScrollListener(this.state.currentTarget),this.unbindWindowEvents()}},{key:"mouseOnToolTip",value:function(){return!(!this.state.show||!this.tooltipRef)&&(this.tooltipRef.matches||(this.tooltipRef.msMatchesSelector?this.tooltipRef.matches=this.tooltipRef.msMatchesSelector:this.tooltipRef.matches=this.tooltipRef.mozMatchesSelector),this.tooltipRef.matches(":hover"))}},{key:"getTargetArray",value:function(t){var e,o=[];if(t){var r=t.replace(/\\/g,"\\\\").replace(/"/g,'\\"');e='[data-tip][data-for="'.concat(r,'"]')}else e="[data-tip]:not([data-for])";return W(document.getElementsByTagName("*")).filter((function(t){return t.shadowRoot})).forEach((function(t){o=o.concat(W(t.shadowRoot.querySelectorAll(e)))})),o.concat(W(document.querySelectorAll(e)))}},{key:"bindListener",value:function(){var t=this,e=this.props,o=e.id,r=e.globalEventOff,n=e.isCapture,i=this.getTargetArray(o);i.forEach((function(e){null===e.getAttribute("currentItem")&&e.setAttribute("currentItem","false"),t.unbindBasicListener(e),t.isCustomEvent(e)&&t.customUnbindListener(e)})),this.isBodyMode()?this.bindBodyListener(i):i.forEach((function(e){var o=t.isCapture(e),r=t.getEffect(e);t.isCustomEvent(e)?t.customBindListener(e):(e.addEventListener("mouseenter",t.showTooltip,o),"float"===r&&e.addEventListener("mousemove",t.updateTooltip,o),e.addEventListener("mouseleave",t.hideTooltip,o))})),r&&(window.removeEventListener(r,this.hideTooltip),window.addEventListener(r,this.hideTooltip,n)),this.bindRemovalTracker()}},{key:"unbindListener",value:function(){var t=this,e=this.props,o=e.id,r=e.globalEventOff;this.isBodyMode()?this.unbindBodyListener():this.getTargetArray(o).forEach((function(e){t.unbindBasicListener(e),t.isCustomEvent(e)&&t.customUnbindListener(e)})),r&&window.removeEventListener(r,this.hideTooltip),this.unbindRemovalTracker()}},{key:"unbindBasicListener",value:function(t){var e=this.isCapture(t);t.removeEventListener("mouseenter",this.showTooltip,e),t.removeEventListener("mousemove",this.updateTooltip,e),t.removeEventListener("mouseleave",this.hideTooltip,e)}},{key:"getTooltipContent",value:function(){var t,e=this.props,o=e.getContent,r=e.children;return o&&(t=Array.isArray(o)?o[0]&&o[0](this.state.originTooltip):o(this.state.originTooltip)),M(this.state.originTooltip,r,t,this.state.isMultiline)}},{key:"isEmptyTip",value:function(t){return"string"===typeof t&&""===t||null===t}},{key:"showTooltip",value:function(t,e){if(!e||this.getTargetArray(this.props.id).some((function(e){return e===t.currentTarget}))){var o=this.props,r=o.multiline,n=o.getContent,i=t.currentTarget.getAttribute("data-tip"),a=t.currentTarget.getAttribute("data-multiline")||r||!1,s=t instanceof window.FocusEvent||e,l=!0;t.currentTarget.getAttribute("data-scroll-hide")?l="true"===t.currentTarget.getAttribute("data-scroll-hide"):null!=this.props.scrollHide&&(l=this.props.scrollHide);var p=t.currentTarget.getAttribute("data-place")||this.props.place||"top",u=s?"solid":this.getEffect(t.currentTarget),c=t.currentTarget.getAttribute("data-offset")||this.props.offset||{},d=R(t,t.currentTarget,this.tooltipRef,p,p,u,c);d.position&&this.props.overridePosition&&(d.position=this.props.overridePosition(d.position,t,t.currentTarget,this.tooltipRef,p,p,u,c));var f=d.isNewState?d.newState.place:p;this.clearTimer();var h=t.currentTarget,b=this.state.show?h.getAttribute("data-delay-update")||this.props.delayUpdate:0,v=this,g=function(){v.setState({originTooltip:i,isMultiline:a,desiredPlace:p,place:f,type:h.getAttribute("data-type")||v.props.type||"dark",customColors:{text:h.getAttribute("data-text-color")||v.props.textColor||null,background:h.getAttribute("data-background-color")||v.props.backgroundColor||null,border:h.getAttribute("data-border-color")||v.props.borderColor||null,arrow:h.getAttribute("data-arrow-color")||v.props.arrowColor||null},effect:u,offset:c,html:(h.getAttribute("data-html")?"true"===h.getAttribute("data-html"):v.props.html)||!1,delayShow:h.getAttribute("data-delay-show")||v.props.delayShow||0,delayHide:h.getAttribute("data-delay-hide")||v.props.delayHide||0,delayUpdate:h.getAttribute("data-delay-update")||v.props.delayUpdate||0,border:(h.getAttribute("data-border")?"true"===h.getAttribute("data-border"):v.props.border)||!1,extraClass:h.getAttribute("data-class")||v.props.class||v.props.className||"",disable:(h.getAttribute("data-tip-disable")?"true"===h.getAttribute("data-tip-disable"):v.props.disable)||!1,currentTarget:h},(function(){l&&v.addScrollListener(v.state.currentTarget),v.updateTooltip(t),n&&Array.isArray(n)&&(v.intervalUpdateContent=setInterval((function(){if(v.mount){var t=v.props.getContent,e=M(i,"",t[0](),a),o=v.isEmptyTip(e);v.setState({isEmptyTip:o}),v.updatePosition()}}),n[1]))}))};b?this.delayReshow=setTimeout(g,b):g()}}},{key:"updateTooltip",value:function(t){var e=this,o=this.state,r=o.delayShow,n=o.disable,i=this.props.afterShow,a=this.getTooltipContent(),s=parseInt(r,10),l=t.currentTarget||t.target;if(!this.mouseOnToolTip()&&!this.isEmptyTip(a)&&!n){var p=function(){if(Array.isArray(a)&&a.length>0||a){var o=!e.state.show;e.setState({currentEvent:t,currentTarget:l,show:!0},(function(){e.updatePosition(),o&&i&&i(t)}))}};clearTimeout(this.delayShowLoop),r?this.delayShowLoop=setTimeout(p,s):p()}}},{key:"listenForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.addEventListener("mouseleave",this.hideTooltip)}},{key:"removeListenerForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.removeEventListener("mouseleave",this.hideTooltip)}},{key:"hideTooltip",value:function(t,e){var o=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{isScroll:!1},n=this.state.disable,i=r.isScroll,a=i?0:this.state.delayHide,s=this.props.afterHide,l=this.getTooltipContent();if(this.mount&&!this.isEmptyTip(l)&&!n){if(e){var p=this.getTargetArray(this.props.id),u=p.some((function(e){return e===t.currentTarget}));if(!u||!this.state.show)return}var c=function(){var e=o.state.show;o.mouseOnToolTip()?o.listenForTooltipExit():(o.removeListenerForTooltipExit(),o.setState({show:!1},(function(){o.removeScrollListener(o.state.currentTarget),e&&s&&s(t)})))};this.clearTimer(),a?this.delayHideLoop=setTimeout(c,parseInt(a,10)):c()}}},{key:"hideTooltipOnScroll",value:function(t,e){this.hideTooltip(t,e,{isScroll:!0})}},{key:"addScrollListener",value:function(t){var e=this.isCapture(t);window.addEventListener("scroll",this.hideTooltipOnScroll,e)}},{key:"removeScrollListener",value:function(t){var e=this.isCapture(t);window.removeEventListener("scroll",this.hideTooltipOnScroll,e)}},{key:"updatePosition",value:function(){var t=this,e=this.state,o=e.currentEvent,r=e.currentTarget,n=e.place,i=e.desiredPlace,a=e.effect,s=e.offset,l=this.tooltipRef,p=R(o,r,l,n,i,a,s);if(p.position&&this.props.overridePosition&&(p.position=this.props.overridePosition(p.position,o,r,l,n,i,a,s)),p.isNewState)return this.setState(p.newState,(function(){t.updatePosition()}));l.style.left=p.position.left+"px",l.style.top=p.position.top+"px"}},{key:"clearTimer",value:function(){clearTimeout(this.delayShowLoop),clearTimeout(this.delayHideLoop),clearTimeout(this.delayReshow),clearInterval(this.intervalUpdateContent)}},{key:"hasCustomColors",value:function(){var t=this;return Boolean(Object.keys(this.state.customColors).find((function(e){return"border"!==e&&t.state.customColors[e]}))||this.state.border&&this.state.customColors.border)}},{key:"render",value:function(){var t=this,o=this.state,r=o.extraClass,i=o.html,a=o.ariaProps,s=o.disable,l=this.getTooltipContent(),p=this.isEmptyTip(l),u=V(this.state.uuid,this.state.customColors,this.state.type,this.state.border),c="__react_component_tooltip"+" ".concat(this.state.uuid)+(!this.state.show||s||p?"":" show")+(this.state.border?" border":"")+" place-".concat(this.state.place)+" type-".concat(this.hasCustomColors()?"custom":this.state.type)+(this.props.delayUpdate?" allow_hover":"")+(this.props.clickable?" allow_click":""),d=this.props.wrapper;e.supportedWrappers.indexOf(d)<0&&(d=e.defaultProps.wrapper);var f=[c,r].filter(Boolean).join(" ");if(i){var h="".concat(l,"\n<style>").concat(u,"</style>");return n.a.createElement(d,g({className:"".concat(f),id:this.props.id,ref:function(e){return t.tooltipRef=e}},a,{"data-id":"tooltip",dangerouslySetInnerHTML:{__html:h}}))}return n.a.createElement(d,g({className:"".concat(f),id:this.props.id},a,{ref:function(e){return t.tooltipRef=e},"data-id":"tooltip"}),n.a.createElement("style",{dangerouslySetInnerHTML:{__html:u}}),l)}}],[{key:"getDerivedStateFromProps",value:function(t,e){var o=e.ariaProps,r=D(t);return Object.keys(r).some((function(t){return r[t]!==o[t]}))?y({},e,{ariaProps:r}):null}}]),e}(n.a.Component),v(z,"defaultProps",{insecure:!0,resizeHide:!0,wrapper:"div",clickable:!1}),v(z,"supportedWrappers",["div","span"]),v(z,"displayName","ReactTooltip"),(X=U=N).prototype.bindRemovalTracker=function(){var t=this,e=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;if(null!=e){var o=new e((function(e){for(var o=0;o<e.length;o++)for(var r=e[o],n=0;n<r.removedNodes.length;n++)if(r.removedNodes[n]===t.state.currentTarget)return void t.hideTooltip()}));o.observe(window.document,{childList:!0,subtree:!0}),this.removalTracker=o}},U=void(X.prototype.unbindRemovalTracker=function(){this.removalTracker&&(this.removalTracker.disconnect(),this.removalTracker=null)})||U))||U)||U)||U)||U)||U)||U;e.a=Y}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL2J5dGVzVG9VdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9pbmRleC5lcy5qcyJdLCJuYW1lcyI6WyJnZXRSYW5kb21WYWx1ZXMiLCJjcnlwdG8iLCJiaW5kIiwibXNDcnlwdG8iLCJybmRzOCIsIlVpbnQ4QXJyYXkiLCJybmciLCJFcnJvciIsImJ5dGVUb0hleCIsInRvU3RyaW5nIiwic3Vic3RyIiwiYnVmIiwib2Zmc2V0IiwiaSIsImJ0aCIsImpvaW4iLCJvcHRpb25zIiwiQXJyYXkiLCJybmRzIiwicmFuZG9tIiwiaWkiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJ2YWx1ZSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJ0aGlzIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJwdXNoIiwiX29iamVjdFNwcmVhZDIiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfZ2V0UHJvdG90eXBlT2YiLCJvIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJDT05TVEFOVCIsIkhJREUiLCJSRUJVSUxEIiwiU0hPVyIsImRpc3BhdGNoR2xvYmFsRXZlbnQiLCJldmVudE5hbWUiLCJvcHRzIiwiZXZlbnQiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImRldGFpbCIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY2hlY2tTdGF0dXMiLCJkYXRhRXZlbnRPZmYiLCJlIiwic2hvdyIsInN0YXRlIiwiaWQiLCJpc0NhcHR1cmUiLCJjdXJyZW50VGFyZ2V0IiwiY3VycmVudEl0ZW0iLCJnZXRBdHRyaWJ1dGUiLCJzdG9wUHJvcGFnYXRpb24iLCJoaWRlVG9vbHRpcCIsInNldEF0dHJpYnV0ZSIsInNldFVudGFyZ2V0SXRlbXMiLCJnZXRUYXJnZXRBcnJheSIsInNob3dUb29sdGlwIiwidGFyZ2V0QXJyYXkiLCJjdXN0b21MaXN0ZW5lcnMiLCJzZXQiLCJsaXN0ZW5lciIsImdldCIsIm1hcCIsInVuZGVmaW5lZCIsImJvZHlMaXN0ZW5lciIsImNhbGxiYWNrIiwiX29wdGlvbnMkcmVzcGVjdEVmZmVjIiwicmVzcGVjdEVmZmVjdCIsIl9vcHRpb25zJGN1c3RvbUV2ZW50IiwiY3VzdG9tRXZlbnQiLCJ0aXAiLCJmb3JJZCIsImlzQ3VzdG9tRXZlbnQiLCJpc1RhcmdldEJlbG9uZ3NUb1Rvb2x0aXAiLCJnZXRFZmZlY3QiLCJwcm94eSIsIm1ha2VQcm94eSIsImZpbmRDdXN0b21FdmVudHMiLCJkYXRhQXR0cmlidXRlIiwiZXZlbnRzIiwic3BsaXQiLCJnZXRCb2R5IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRQb3NpdGlvbiIsIm5vZGUiLCJwbGFjZSIsImRlc2lyZWRQbGFjZSIsImVmZmVjdCIsIl9nZXREaW1lbnNpb25zIiwiZ2V0RGltZW5zaW9ucyIsInRpcFdpZHRoIiwid2lkdGgiLCJ0aXBIZWlnaHQiLCJoZWlnaHQiLCJfZ2V0RGltZW5zaW9uczIiLCJ0YXJnZXRXaWR0aCIsInRhcmdldEhlaWdodCIsIl9nZXRDdXJyZW50T2Zmc2V0IiwiZ2V0Q3VycmVudE9mZnNldCIsIm1vdXNlWCIsIm1vdXNlWSIsImRlZmF1bHRPZmZzZXQiLCJnZXREZWZhdWx0UG9zaXRpb24iLCJfY2FsY3VsYXRlT2Zmc2V0IiwiY2FsY3VsYXRlT2Zmc2V0IiwiZXh0cmFPZmZzZXRYIiwiZXh0cmFPZmZzZXRZIiwid2luZG93V2lkdGgiLCJpbm5lcldpZHRoIiwid2luZG93SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJfZ2V0UGFyZW50IiwiZ2V0UGFyZW50IiwicGFyZW50VG9wIiwicGFyZW50TGVmdCIsImdldFRpcE9mZnNldExlZnQiLCJvZmZzZXRYIiwibCIsImdldFRpcE9mZnNldFRvcCIsIm9mZnNldFkiLCJ0Iiwib3V0c2lkZVJpZ2h0IiwiciIsImdldFRpcE9mZnNldFJpZ2h0Iiwib3V0c2lkZUJvdHRvbSIsImIiLCJnZXRUaXBPZmZzZXRCb3R0b20iLCJvdXRzaWRlIiwib3V0c2lkZUxlZnQiLCJvdXRzaWRlVG9wIiwiaW5zaWRlIiwicGxhY2VzTGlzdCIsImluc2lkZUxpc3QiLCJuZXdQbGFjZSIsImlzTmV3U3RhdGUiLCJzaG91bGRVcGRhdGVQbGFjZSIsIm5ld1N0YXRlIiwicG9zaXRpb24iLCJsZWZ0IiwicGFyc2VJbnQiLCJ0b3AiLCJfbm9kZSRnZXRCb3VuZGluZ0NsaWUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJ0YXJnZXRUb3AiLCJ0YXJnZXRMZWZ0IiwiX2dldERpbWVuc2lvbnMzIiwiY2xpZW50WCIsImNsaWVudFkiLCJyaWdodCIsImJvdHRvbSIsImRpc1RvTW91c2UiLCJKU09OIiwicGFyc2UiLCJyZXBsYWNlIiwiY3VycmVudFBhcmVudCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGFyZW50RWxlbWVudCIsImdldFRpcENvbnRlbnQiLCJjaGlsZHJlbiIsImdldENvbnRlbnQiLCJtdWx0aWxpbmUiLCJyZWdleHAiLCJ0ZXN0IiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJwYXJzZUFyaWEiLCJhcmlhT2JqIiwicHJvcCIsIm5vZGVMaXN0VG9BcnJheSIsIm5vZGVMaXN0Iiwic2xpY2UiLCJmaWxsIiwiaW5kZXgiLCJjc3MiLCJzdHlsZSIsImlubmVySFRNTCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsIl9fXyRpbnNlcnRTdHlsZSIsIl9jbGFzcyIsIl9jbGFzczIiLCJfdGVtcCIsImRlZmF1bHRDb2xvcnMiLCJnZW5lcmF0ZVRvb2x0aXBTdHlsZSIsInV1aWQiLCJjdXN0b21Db2xvcnMiLCJ0eXBlIiwiaGFzQm9yZGVyIiwiY29sb3JzIiwidGV4dENvbG9yIiwidGV4dCIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmQiLCJib3JkZXJDb2xvciIsImJvcmRlciIsImFycm93Q29sb3IiLCJhcnJvdyIsImNvbmNhdCIsImdlbmVyYXRlU3R5bGUiLCJnZXREZWZhdWx0UG9wdXBDb2xvcnMiLCJnZXRQb3B1cENvbG9ycyIsImhpZGUiLCJyZWJ1aWxkIiwiZ2xvYmFsUmVidWlsZCIsIm1vdW50IiwidW5iaW5kTGlzdGVuZXIiLCJiaW5kTGlzdGVuZXIiLCJnbG9iYWxTaG93IiwiaGFzVGFyZ2V0IiwiZ2xvYmFsSGlkZSIsInN0YXRpY01ldGhvZHMiLCJiaW5kV2luZG93RXZlbnRzIiwicmVzaXplSGlkZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib25XaW5kb3dSZXNpemUiLCJ1bmJpbmRXaW5kb3dFdmVudHMiLCJ3aW5kb3dMaXN0ZW5lciIsImVsZSIsImN1c3RvbUJpbmRMaXN0ZW5lciIsIl90aGlzIiwiX3RoaXMkc3RhdGUiLCJldmVudE9mZiIsImRhdGFFdmVudCIsImN1c3RvbUxpc3RlbmVyIiwiY3VzdG9tVW5iaW5kTGlzdGVuZXIiLCJfdGhpcyRzdGF0ZTIiLCJpc0JvZHlNb2RlIiwiYm9keU1vZGUiLCJiaW5kQm9keUxpc3RlbmVyIiwicG9zc2libGVDdXN0b21FdmVudHMiLCJwb3NzaWJsZUN1c3RvbUV2ZW50c09mZiIsImJvZHkiLCJjdXN0b21FdmVudHMiLCJjdXN0b21FdmVudHNPZmYiLCJ1bmJpbmRCb2R5TGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJib2R5TW9kZUxpc3RlbmVycyIsIl9ldmVudCIsIm1vdXNlb3ZlciIsIm1vdXNlbW92ZSIsInVwZGF0ZVRvb2x0aXAiLCJtb3VzZW91dCIsInRhcmdldEV2ZW50T2ZmIiwiX2V2ZW50MiIsIl9ldmVudDMiLCJfUmVhY3QkQ29tcG9uZW50IiwiUmVhY3RUb29sdGlwIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJleHRyYUNsYXNzIiwiaHRtbCIsImRlbGF5SGlkZSIsImRlbGF5U2hvdyIsImN1cnJlbnRFdmVudCIsImFyaWFQcm9wcyIsImlzRW1wdHlUaXAiLCJkaXNhYmxlIiwib3JpZ2luVG9vbHRpcCIsImlzTXVsdGlsaW5lIiwiZGVsYXlTaG93TG9vcCIsImRlbGF5SGlkZUxvb3AiLCJkZWxheVJlc2hvdyIsImludGVydmFsVXBkYXRlQ29udGVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX2luaGVyaXRzIiwic3RyaW5nIiwiYW55IiwiYm9vbCIsImluc2VjdXJlIiwibnVtYmVyIiwiZGVsYXlVcGRhdGUiLCJnbG9iYWxFdmVudE9mZiIsImFmdGVyU2hvdyIsImZ1bmMiLCJhZnRlckhpZGUiLCJvdmVycmlkZVBvc2l0aW9uIiwic2Nyb2xsSGlkZSIsIndyYXBwZXIiLCJjbGlja2FibGUiLCJtZXRob2RBcnJheSIsIl90aGlzMiIsIm1ldGhvZCIsIl90aGlzJHByb3BzIiwiY2xlYXJUaW1lciIsInJlbW92ZVNjcm9sbExpc3RlbmVyIiwidG9vbHRpcFJlZiIsIm1hdGNoZXMiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsInNlbGVjdG9yIiwiZXNjYXBlZCIsImVsZW1lbnQiLCJzaGFkb3dSb290IiwicXVlcnlTZWxlY3RvckFsbCIsIl90aGlzMyIsIl90aGlzJHByb3BzMiIsInVuYmluZEJhc2ljTGlzdGVuZXIiLCJpc0NhcHR1cmVNb2RlIiwiYmluZFJlbW92YWxUcmFja2VyIiwiX3RoaXM0IiwiX3RoaXMkcHJvcHMzIiwidW5iaW5kUmVtb3ZhbFRyYWNrZXIiLCJjb250ZW50IiwiX3RoaXMkcHJvcHM0IiwiaXNBcnJheSIsInBsYWNlaG9sZGVyIiwiaXNHbG9iYWxDYWxsIiwic29tZSIsIl90aGlzJHByb3BzNSIsInN3aXRjaFRvU29saWQiLCJGb2N1c0V2ZW50IiwicmVzdWx0IiwicmVzaG93RGVsYXkiLCJ1cGRhdGVTdGF0ZSIsInNldFN0YXRlIiwiYWRkU2Nyb2xsTGlzdGVuZXIiLCJzZXRJbnRlcnZhbCIsIl9nZXRDb250ZW50IiwidXBkYXRlUG9zaXRpb24iLCJzZXRUaW1lb3V0IiwiX3RoaXM1IiwiZ2V0VG9vbHRpcENvbnRlbnQiLCJkZWxheVRpbWUiLCJldmVudFRhcmdldCIsIm1vdXNlT25Ub29sVGlwIiwiaXNJbnZpc2libGUiLCJjbGVhclRpbWVvdXQiLCJfdGhpczYiLCJpc1Njcm9sbCIsImlzTXlFbGVtZW50IiwicmVzZXRTdGF0ZSIsImlzVmlzaWJsZSIsImxpc3RlbkZvclRvb2x0aXBFeGl0IiwicmVtb3ZlTGlzdGVuZXJGb3JUb29sdGlwRXhpdCIsImhpZGVUb29sdGlwT25TY3JvbGwiLCJfdGhpczciLCJjbGVhckludGVydmFsIiwiX3RoaXM4IiwiQm9vbGVhbiIsImZpbmQiLCJjb2xvciIsIl90aGlzOSIsIl90aGlzJHN0YXRlMyIsInRvb2x0aXBDbGFzcyIsImhhc0N1c3RvbUNvbG9ycyIsIldyYXBwZXIiLCJzdXBwb3J0ZWRXcmFwcGVycyIsImluZGV4T2YiLCJkZWZhdWx0UHJvcHMiLCJ3cmFwcGVyQ2xhc3NOYW1lIiwiaHRtbENvbnRlbnQiLCJyZWYiLCJfcmVmIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJfcmVmMiIsIm5leHRQcm9wcyIsInByZXZTdGF0ZSIsIm5ld0FyaWFQcm9wcyIsIkNvbXBvbmVudCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiTW96TXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmVyIiwibXV0YXRpb25zIiwibTEiLCJtdXRhdGlvbiIsIm0yIiwicmVtb3ZlZE5vZGVzIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJyZW1vdmFsVHJhY2tlciIsImRpc2Nvbm5lY3QiXSwibWFwcGluZ3MiOiI2SEFLSUEsRUFBbUMsb0JBQVZDLFFBQXlCQSxPQUFPRCxpQkFBbUJDLE9BQU9ELGdCQUFnQkUsS0FBS0QsU0FBOEIsb0JBQVpFLFVBQThELG1CQUE1QkEsU0FBU0gsaUJBQWlDRyxTQUFTSCxnQkFBZ0JFLEtBQUtDLFVBQ3BPQyxFQUFRLElBQUlDLFdBQVcsSUFFWixTQUFTQyxJQUN0QixJQUFLTixFQUNILE1BQU0sSUFBSU8sTUFBTSw0R0FHbEIsT0FBT1AsRUFBZ0JJLEdDUHpCLElBRkEsSUFBSUksRUFBWSxHQUVQLEVBQUksRUFBRyxFQUFJLE1BQU8sRUFDekJBLEVBQVUsSUFBTSxFQUFJLEtBQU9DLFNBQVMsSUFBSUMsT0FBTyxHQVVsQyxNQVBmLFNBQXFCQyxFQUFLQyxHQUN4QixJQUFJQyxFQUFJRCxHQUFVLEVBQ2RFLEVBQU1O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WCxlQUFpQixTQW1wQzRHdE0sS0FBV0EsSUFBV0EsSUFBV0EsSUFBV0EsSUFBV0EsSUFBV0EsRUFFM0wiLCJmaWxlIjoiYXNzZXRzL2pzL3ZlbmRvcnMucmVhY3QtdG9vbHRpcC4wMDQwZmE0NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLiBBbHNvLFxuLy8gZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIChtc0NyeXB0bykgb24gSUUxMS5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykgfHwgdHlwZW9mIG1zQ3J5cHRvICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XG52YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsIi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xudmFyIGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7IC8vIGpvaW4gdXNlZCB0byBmaXggbWVtb3J5IGlzc3VlIGNhdXNlZCBieSBjb25jYXRlbmF0aW9uOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMTc1I2M0XG5cbiAgcmV0dXJuIFtidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJywgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV1dLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBieXRlc1RvVXVpZDsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBieXRlc1RvVXVpZCBmcm9tICcuL2J5dGVzVG9VdWlkLmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyIsImZ1bmN0aW9uIF9fXyRpbnNlcnRTdHlsZShjc3MpIHtcbiAgaWYgKCFjc3MpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgc3R5bGUuaW5uZXJIVE1MID0gY3NzO1xuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgcmV0dXJuIGNzcztcbn1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB2NCB9IGZyb20gJ3V1aWQnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbnZhciBDT05TVEFOVCA9IHtcbiAgR0xPQkFMOiB7XG4gICAgSElERTogXCJfX3JlYWN0X3Rvb2x0aXBfaGlkZV9ldmVudFwiLFxuICAgIFJFQlVJTEQ6IFwiX19yZWFjdF90b29sdGlwX3JlYnVpbGRfZXZlbnRcIixcbiAgICBTSE9XOiBcIl9fcmVhY3RfdG9vbHRpcF9zaG93X2V2ZW50XCJcbiAgfVxufTtcblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kcyBmb3IgcmVhY3QtdG9vbHRpcFxuICovXG5cbnZhciBkaXNwYXRjaEdsb2JhbEV2ZW50ID0gZnVuY3Rpb24gZGlzcGF0Y2hHbG9iYWxFdmVudChldmVudE5hbWUsIG9wdHMpIHtcbiAgLy8gQ29tcGF0aWJsZSB3aXRoIElFXG4gIC8vIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNjU5NjEyMy9pbnRlcm5ldC1leHBsb3Jlci05LTEwLTExLWV2ZW50LWNvbnN0cnVjdG9yLWRvZXNudC13b3JrXG4gIC8vIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50L0N1c3RvbUV2ZW50XG4gIHZhciBldmVudDtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuICAgICAgZGV0YWlsOiBvcHRzXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIGZhbHNlLCB0cnVlLCBvcHRzKTtcbiAgfVxuXG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn07XG5cbmZ1bmN0aW9uIHN0YXRpY01ldGhvZHMgKHRhcmdldCkge1xuICAvKipcbiAgICogSGlkZSBhbGwgdG9vbHRpcFxuICAgKiBAdHJpZ2dlciBSZWFjdFRvb2x0aXAuaGlkZSgpXG4gICAqL1xuICB0YXJnZXQuaGlkZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBkaXNwYXRjaEdsb2JhbEV2ZW50KENPTlNUQU5ULkdMT0JBTC5ISURFLCB7XG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pO1xuICB9O1xuICAvKipcbiAgICogUmVidWlsZCBhbGwgdG9vbHRpcFxuICAgKiBAdHJpZ2dlciBSZWFjdFRvb2x0aXAucmVidWlsZCgpXG4gICAqL1xuXG5cbiAgdGFyZ2V0LnJlYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGlzcGF0Y2hHbG9iYWxFdmVudChDT05TVEFOVC5HTE9CQUwuUkVCVUlMRCk7XG4gIH07XG4gIC8qKlxuICAgKiBTaG93IHNwZWNpZmljIHRvb2x0aXBcbiAgICogQHRyaWdnZXIgUmVhY3RUb29sdGlwLnNob3coKVxuICAgKi9cblxuXG4gIHRhcmdldC5zaG93ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGRpc3BhdGNoR2xvYmFsRXZlbnQoQ09OU1RBTlQuR0xPQkFMLlNIT1csIHtcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSk7XG4gIH07XG5cbiAgdGFyZ2V0LnByb3RvdHlwZS5nbG9iYWxSZWJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLm1vdW50KSB7XG4gICAgICB0aGlzLnVuYmluZExpc3RlbmVyKCk7XG4gICAgICB0aGlzLmJpbmRMaXN0ZW5lcigpO1xuICAgIH1cbiAgfTtcblxuICB0YXJnZXQucHJvdG90eXBlLmdsb2JhbFNob3cgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5tb3VudCkge1xuICAgICAgdmFyIGhhc1RhcmdldCA9IGV2ZW50ICYmIGV2ZW50LmRldGFpbCAmJiBldmVudC5kZXRhaWwudGFyZ2V0ICYmIHRydWUgfHwgZmFsc2U7IC8vIENyZWF0ZSBhIGZha2UgZXZlbnQsIHNwZWNpZmljIHNob3cgd2lsbCBsaW1pdCB0aGUgdHlwZSB0byBgc29saWRgXG4gICAgICAvLyBvbmx5IGBmbG9hdGAgdHlwZSBjYXJlcyBlLmNsaWVudFggZS5jbGllbnRZXG5cbiAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoe1xuICAgICAgICBjdXJyZW50VGFyZ2V0OiBoYXNUYXJnZXQgJiYgZXZlbnQuZGV0YWlsLnRhcmdldFxuICAgICAgfSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUuZ2xvYmFsSGlkZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0aGlzLm1vdW50KSB7XG4gICAgICB2YXIgaGFzVGFyZ2V0ID0gZXZlbnQgJiYgZXZlbnQuZGV0YWlsICYmIGV2ZW50LmRldGFpbC50YXJnZXQgJiYgdHJ1ZSB8fCBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZVRvb2x0aXAoe1xuICAgICAgICBjdXJyZW50VGFyZ2V0OiBoYXNUYXJnZXQgJiYgZXZlbnQuZGV0YWlsLnRhcmdldFxuICAgICAgfSwgaGFzVGFyZ2V0KTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogRXZlbnRzIHRoYXQgc2hvdWxkIGJlIGJvdW5kIHRvIHRoZSB3aW5kb3dcbiAqL1xuZnVuY3Rpb24gd2luZG93TGlzdGVuZXIgKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmJpbmRXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiAocmVzaXplSGlkZSkge1xuICAgIC8vIFJlYWN0VG9vbHRpcC5oaWRlXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLkhJREUsIHRoaXMuZ2xvYmFsSGlkZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLkhJREUsIHRoaXMuZ2xvYmFsSGlkZSwgZmFsc2UpOyAvLyBSZWFjdFRvb2x0aXAucmVidWlsZFxuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLlJFQlVJTEQsIHRoaXMuZ2xvYmFsUmVidWlsZCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLlJFQlVJTEQsIHRoaXMuZ2xvYmFsUmVidWlsZCwgZmFsc2UpOyAvLyBSZWFjdFRvb2x0aXAuc2hvd1xuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLlNIT1csIHRoaXMuZ2xvYmFsU2hvdyk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLlNIT1csIHRoaXMuZ2xvYmFsU2hvdywgZmFsc2UpOyAvLyBSZXNpemVcblxuICAgIGlmIChyZXNpemVIaWRlKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uV2luZG93UmVzaXplKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdGFyZ2V0LnByb3RvdHlwZS51bmJpbmRXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLkhJREUsIHRoaXMuZ2xvYmFsSGlkZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLlJFQlVJTEQsIHRoaXMuZ2xvYmFsUmVidWlsZCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQ09OU1RBTlQuR0xPQkFMLlNIT1csIHRoaXMuZ2xvYmFsU2hvdyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vbldpbmRvd1Jlc2l6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBpbnZva2VkIGJ5IHJlc2l6ZSBldmVudCBvZiB3aW5kb3dcbiAgICovXG5cblxuICB0YXJnZXQucHJvdG90eXBlLm9uV2luZG93UmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5tb3VudCkgcmV0dXJuO1xuICAgIHRoaXMuaGlkZVRvb2x0aXAoKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDdXN0b20gZXZlbnRzIHRvIGNvbnRyb2wgc2hvd2luZyBhbmQgaGlkaW5nIG9mIHRvb2x0aXBcbiAqXG4gKiBAYXR0cmlidXRlc1xuICogLSBgZXZlbnRgIHtTdHJpbmd9XG4gKiAtIGBldmVudE9mZmAge1N0cmluZ31cbiAqL1xudmFyIGNoZWNrU3RhdHVzID0gZnVuY3Rpb24gY2hlY2tTdGF0dXMoZGF0YUV2ZW50T2ZmLCBlKSB7XG4gIHZhciBzaG93ID0gdGhpcy5zdGF0ZS5zaG93O1xuICB2YXIgaWQgPSB0aGlzLnByb3BzLmlkO1xuICB2YXIgaXNDYXB0dXJlID0gdGhpcy5pc0NhcHR1cmUoZS5jdXJyZW50VGFyZ2V0KTtcbiAgdmFyIGN1cnJlbnRJdGVtID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImN1cnJlbnRJdGVtXCIpO1xuICBpZiAoIWlzQ2FwdHVyZSkgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICBpZiAoc2hvdyAmJiBjdXJyZW50SXRlbSA9PT0gXCJ0cnVlXCIpIHtcbiAgICBpZiAoIWRhdGFFdmVudE9mZikgdGhpcy5oaWRlVG9vbHRpcChlKTtcbiAgfSBlbHNlIHtcbiAgICBlLmN1cnJlbnRUYXJnZXQuc2V0QXR0cmlidXRlKFwiY3VycmVudEl0ZW1cIiwgXCJ0cnVlXCIpO1xuICAgIHNldFVudGFyZ2V0SXRlbXMoZS5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldFRhcmdldEFycmF5KGlkKSk7XG4gICAgdGhpcy5zaG93VG9vbHRpcChlKTtcbiAgfVxufTtcblxudmFyIHNldFVudGFyZ2V0SXRlbXMgPSBmdW5jdGlvbiBzZXRVbnRhcmdldEl0ZW1zKGN1cnJlbnRUYXJnZXQsIHRhcmdldEFycmF5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY3VycmVudFRhcmdldCAhPT0gdGFyZ2V0QXJyYXlbaV0pIHtcbiAgICAgIHRhcmdldEFycmF5W2ldLnNldEF0dHJpYnV0ZShcImN1cnJlbnRJdGVtXCIsIFwiZmFsc2VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldEFycmF5W2ldLnNldEF0dHJpYnV0ZShcImN1cnJlbnRJdGVtXCIsIFwidHJ1ZVwiKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBjdXN0b21MaXN0ZW5lcnMgPSB7XG4gIGlkOiBcIjliNjlmOTJlLWQzZmUtNDk4Yi1iMWI0LWM1ZTYzYTUxYjBjZlwiLFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh0YXJnZXQsIGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLmlkIGluIHRhcmdldCkge1xuICAgICAgdmFyIG1hcCA9IHRhcmdldFt0aGlzLmlkXTtcbiAgICAgIG1hcFtldmVudF0gPSBsaXN0ZW5lcjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhpcyBpcyB3b3JrYXJvdW5kIGZvciBXZWFrTWFwLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGluIG9sZGVyIGJyb3dzZXJzLCBzdWNoIGFzIElFXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCB0aGlzLmlkLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgZXZlbnQsIGxpc3RlbmVyKVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldCh0YXJnZXQsIGV2ZW50KSB7XG4gICAgdmFyIG1hcCA9IHRhcmdldFt0aGlzLmlkXTtcblxuICAgIGlmIChtYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG1hcFtldmVudF07XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gY3VzdG9tRXZlbnQgKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmlzQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbiAoZWxlKSB7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5zdGF0ZS5ldmVudDtcbiAgICByZXR1cm4gZXZlbnQgfHwgISFlbGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1ldmVudFwiKTtcbiAgfTtcbiAgLyogQmluZCBsaXN0ZW5lciBmb3IgY3VzdG9tIGV2ZW50ICovXG5cblxuICB0YXJnZXQucHJvdG90eXBlLmN1c3RvbUJpbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgZXZlbnQgPSBfdGhpcyRzdGF0ZS5ldmVudCxcbiAgICAgICAgZXZlbnRPZmYgPSBfdGhpcyRzdGF0ZS5ldmVudE9mZjtcbiAgICB2YXIgZGF0YUV2ZW50ID0gZWxlLmdldEF0dHJpYnV0ZShcImRhdGEtZXZlbnRcIikgfHwgZXZlbnQ7XG4gICAgdmFyIGRhdGFFdmVudE9mZiA9IGVsZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWV2ZW50LW9mZlwiKSB8fCBldmVudE9mZjtcbiAgICBkYXRhRXZlbnQuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBlbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgY3VzdG9tTGlzdGVuZXJzLmdldChlbGUsIGV2ZW50KSk7XG4gICAgICB2YXIgY3VzdG9tTGlzdGVuZXIgPSBjaGVja1N0YXR1cy5iaW5kKF90aGlzLCBkYXRhRXZlbnRPZmYpO1xuICAgICAgY3VzdG9tTGlzdGVuZXJzLnNldChlbGUsIGV2ZW50LCBjdXN0b21MaXN0ZW5lcik7XG4gICAgICBlbGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY3VzdG9tTGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGlmIChkYXRhRXZlbnRPZmYpIHtcbiAgICAgIGRhdGFFdmVudE9mZi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIF90aGlzLmhpZGVUb29sdGlwKTtcbiAgICAgICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIF90aGlzLmhpZGVUb29sdGlwLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIC8qIFVuYmluZCBsaXN0ZW5lciBmb3IgY3VzdG9tIGV2ZW50ICovXG5cblxuICB0YXJnZXQucHJvdG90eXBlLmN1c3RvbVVuYmluZExpc3RlbmVyID0gZnVuY3Rpb24gKGVsZSkge1xuICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICBldmVudCA9IF90aGlzJHN0YXRlMi5ldmVudCxcbiAgICAgICAgZXZlbnRPZmYgPSBfdGhpcyRzdGF0ZTIuZXZlbnRPZmY7XG4gICAgdmFyIGRhdGFFdmVudCA9IGV2ZW50IHx8IGVsZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWV2ZW50XCIpO1xuICAgIHZhciBkYXRhRXZlbnRPZmYgPSBldmVudE9mZiB8fCBlbGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1ldmVudC1vZmZcIik7XG4gICAgZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZGF0YUV2ZW50LCBjdXN0b21MaXN0ZW5lcnMuZ2V0KGVsZSwgZXZlbnQpKTtcbiAgICBpZiAoZGF0YUV2ZW50T2ZmKSBlbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihkYXRhRXZlbnRPZmYsIHRoaXMuaGlkZVRvb2x0aXApO1xuICB9O1xufVxuXG4vKipcbiAqIFV0aWwgbWV0aG9kIHRvIGp1ZGdlIGlmIGl0IHNob3VsZCBmb2xsb3cgY2FwdHVyZSBtb2RlbFxuICovXG5mdW5jdGlvbiBpc0NhcHR1cmUgKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmlzQ2FwdHVyZSA9IGZ1bmN0aW9uIChjdXJyZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRUYXJnZXQgJiYgY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlzY2FwdHVyZVwiKSA9PT0gXCJ0cnVlXCIgfHwgdGhpcy5wcm9wcy5pc0NhcHR1cmUgfHwgZmFsc2U7XG4gIH07XG59XG5cbi8qKlxuICogVXRpbCBtZXRob2QgdG8gZ2V0IGVmZmVjdFxuICovXG5mdW5jdGlvbiBnZXRFZmZlY3QgKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmdldEVmZmVjdCA9IGZ1bmN0aW9uIChjdXJyZW50VGFyZ2V0KSB7XG4gICAgdmFyIGRhdGFFZmZlY3QgPSBjdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtZWZmZWN0XCIpO1xuICAgIHJldHVybiBkYXRhRWZmZWN0IHx8IHRoaXMucHJvcHMuZWZmZWN0IHx8IFwiZmxvYXRcIjtcbiAgfTtcbn1cblxuLyoqXG4gKiBVdGlsIG1ldGhvZCB0byBnZXQgZWZmZWN0XG4gKi9cblxudmFyIG1ha2VQcm94eSA9IGZ1bmN0aW9uIG1ha2VQcm94eShlKSB7XG4gIHZhciBwcm94eSA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBlKSB7XG4gICAgaWYgKHR5cGVvZiBlW2tleV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcHJveHlba2V5XSA9IGVba2V5XS5iaW5kKGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm94eVtrZXldID0gZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm94eTtcbn07XG5cbnZhciBib2R5TGlzdGVuZXIgPSBmdW5jdGlvbiBib2R5TGlzdGVuZXIoY2FsbGJhY2ssIG9wdGlvbnMsIGUpIHtcbiAgdmFyIF9vcHRpb25zJHJlc3BlY3RFZmZlYyA9IG9wdGlvbnMucmVzcGVjdEVmZmVjdCxcbiAgICAgIHJlc3BlY3RFZmZlY3QgPSBfb3B0aW9ucyRyZXNwZWN0RWZmZWMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkcmVzcGVjdEVmZmVjLFxuICAgICAgX29wdGlvbnMkY3VzdG9tRXZlbnQgPSBvcHRpb25zLmN1c3RvbUV2ZW50LFxuICAgICAgY3VzdG9tRXZlbnQgPSBfb3B0aW9ucyRjdXN0b21FdmVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRjdXN0b21FdmVudDtcbiAgdmFyIGlkID0gdGhpcy5wcm9wcy5pZDtcbiAgdmFyIHRpcCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdGlwXCIpIHx8IG51bGw7XG4gIHZhciBmb3JJZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtZm9yXCIpIHx8IG51bGw7XG4gIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcblxuICBpZiAodGhpcy5pc0N1c3RvbUV2ZW50KHRhcmdldCkgJiYgIWN1c3RvbUV2ZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGlzVGFyZ2V0QmVsb25nc1RvVG9vbHRpcCA9IGlkID09IG51bGwgJiYgZm9ySWQgPT0gbnVsbCB8fCBmb3JJZCA9PT0gaWQ7XG5cbiAgaWYgKHRpcCAhPSBudWxsICYmICghcmVzcGVjdEVmZmVjdCB8fCB0aGlzLmdldEVmZmVjdCh0YXJnZXQpID09PSBcImZsb2F0XCIpICYmIGlzVGFyZ2V0QmVsb25nc1RvVG9vbHRpcCkge1xuICAgIHZhciBwcm94eSA9IG1ha2VQcm94eShlKTtcbiAgICBwcm94eS5jdXJyZW50VGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGNhbGxiYWNrKHByb3h5KTtcbiAgfVxufTtcblxudmFyIGZpbmRDdXN0b21FdmVudHMgPSBmdW5jdGlvbiBmaW5kQ3VzdG9tRXZlbnRzKHRhcmdldEFycmF5LCBkYXRhQXR0cmlidXRlKSB7XG4gIHZhciBldmVudHMgPSB7fTtcbiAgdGFyZ2V0QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlKTtcbiAgICBpZiAoZXZlbnQpIGV2ZW50LnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIGV2ZW50c1tldmVudF0gPSB0cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGV2ZW50cztcbn07XG5cbnZhciBnZXRCb2R5ID0gZnVuY3Rpb24gZ2V0Qm9keSgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXTtcbn07XG5cbmZ1bmN0aW9uIGJvZHlNb2RlICh0YXJnZXQpIHtcbiAgdGFyZ2V0LnByb3RvdHlwZS5pc0JvZHlNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXRoaXMucHJvcHMuYm9keU1vZGU7XG4gIH07XG5cbiAgdGFyZ2V0LnByb3RvdHlwZS5iaW5kQm9keUxpc3RlbmVyID0gZnVuY3Rpb24gKHRhcmdldEFycmF5KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGV2ZW50ID0gX3RoaXMkc3RhdGUuZXZlbnQsXG4gICAgICAgIGV2ZW50T2ZmID0gX3RoaXMkc3RhdGUuZXZlbnRPZmYsXG4gICAgICAgIHBvc3NpYmxlQ3VzdG9tRXZlbnRzID0gX3RoaXMkc3RhdGUucG9zc2libGVDdXN0b21FdmVudHMsXG4gICAgICAgIHBvc3NpYmxlQ3VzdG9tRXZlbnRzT2ZmID0gX3RoaXMkc3RhdGUucG9zc2libGVDdXN0b21FdmVudHNPZmY7XG4gICAgdmFyIGJvZHkgPSBnZXRCb2R5KCk7XG4gICAgdmFyIGN1c3RvbUV2ZW50cyA9IGZpbmRDdXN0b21FdmVudHModGFyZ2V0QXJyYXksIFwiZGF0YS1ldmVudFwiKTtcbiAgICB2YXIgY3VzdG9tRXZlbnRzT2ZmID0gZmluZEN1c3RvbUV2ZW50cyh0YXJnZXRBcnJheSwgXCJkYXRhLWV2ZW50LW9mZlwiKTtcbiAgICBpZiAoZXZlbnQgIT0gbnVsbCkgY3VzdG9tRXZlbnRzW2V2ZW50XSA9IHRydWU7XG4gICAgaWYgKGV2ZW50T2ZmICE9IG51bGwpIGN1c3RvbUV2ZW50c09mZltldmVudE9mZl0gPSB0cnVlO1xuICAgIHBvc3NpYmxlQ3VzdG9tRXZlbnRzLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIGN1c3RvbUV2ZW50c1tldmVudF0gPSB0cnVlO1xuICAgIH0pO1xuICAgIHBvc3NpYmxlQ3VzdG9tRXZlbnRzT2ZmLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIGN1c3RvbUV2ZW50c09mZltldmVudF0gPSB0cnVlO1xuICAgIH0pO1xuICAgIHRoaXMudW5iaW5kQm9keUxpc3RlbmVyKGJvZHkpO1xuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmJvZHlNb2RlTGlzdGVuZXJzID0ge307XG5cbiAgICBpZiAoZXZlbnQgPT0gbnVsbCkge1xuICAgICAgbGlzdGVuZXJzLm1vdXNlb3ZlciA9IGJvZHlMaXN0ZW5lci5iaW5kKHRoaXMsIHRoaXMuc2hvd1Rvb2x0aXAsIHt9KTtcbiAgICAgIGxpc3RlbmVycy5tb3VzZW1vdmUgPSBib2R5TGlzdGVuZXIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZVRvb2x0aXAsIHtcbiAgICAgICAgcmVzcGVjdEVmZmVjdDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBsaXN0ZW5lcnMubW91c2VvdXQgPSBib2R5TGlzdGVuZXIuYmluZCh0aGlzLCB0aGlzLmhpZGVUb29sdGlwLCB7fSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2V2ZW50IGluIGN1c3RvbUV2ZW50cykge1xuICAgICAgbGlzdGVuZXJzW19ldmVudF0gPSBib2R5TGlzdGVuZXIuYmluZCh0aGlzLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdGFyZ2V0RXZlbnRPZmYgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1ldmVudC1vZmZcIikgfHwgZXZlbnRPZmY7XG4gICAgICAgIGNoZWNrU3RhdHVzLmNhbGwoX3RoaXMsIHRhcmdldEV2ZW50T2ZmLCBlKTtcbiAgICAgIH0sIHtcbiAgICAgICAgY3VzdG9tRXZlbnQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9ldmVudDIgaW4gY3VzdG9tRXZlbnRzT2ZmKSB7XG4gICAgICBsaXN0ZW5lcnNbX2V2ZW50Ml0gPSBib2R5TGlzdGVuZXIuYmluZCh0aGlzLCB0aGlzLmhpZGVUb29sdGlwLCB7XG4gICAgICAgIGN1c3RvbUV2ZW50OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfZXZlbnQzIGluIGxpc3RlbmVycykge1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKF9ldmVudDMsIGxpc3RlbmVyc1tfZXZlbnQzXSk7XG4gICAgfVxuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUudW5iaW5kQm9keUxpc3RlbmVyID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICBib2R5ID0gYm9keSB8fCBnZXRCb2R5KCk7XG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuYm9keU1vZGVMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBldmVudCBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIGJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2V2ZW50XSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIFRyYWNraW5nIHRhcmdldCByZW1vdmluZyBmcm9tIERPTS5cbiAqIEl0J3MgbmVjZXNzYXJ5IHRvIGhpZGUgdG9vbHRpcCB3aGVuIGl0J3MgdGFyZ2V0IGRpc2FwcGVhcnMuXG4gKiBPdGhlcndpc2UsIHRoZSB0b29sdGlwIHdvdWxkIGJlIHNob3duIGZvcmV2ZXIgdW50aWwgYW5vdGhlciB0YXJnZXRcbiAqIGlzIHRyaWdnZXJlZC5cbiAqXG4gKiBJZiBNdXRhdGlvbk9ic2VydmVyIGlzIG5vdCBhdmFpbGFibGUsIHRoaXMgZmVhdHVyZSBqdXN0IGRvZXNuJ3Qgd29yay5cbiAqL1xuLy8gaHR0cHM6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDEyLzA1L2RvbS1tdXRhdGlvbm9ic2VydmVyLXJlYWN0aW5nLXRvLWRvbS1jaGFuZ2VzLXdpdGhvdXQta2lsbGluZy1icm93c2VyLXBlcmZvcm1hbmNlL1xudmFyIGdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcyA9IGZ1bmN0aW9uIGdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcygpIHtcbiAgcmV0dXJuIHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyO1xufTtcblxuZnVuY3Rpb24gdHJhY2tSZW1vdmFsICh0YXJnZXQpIHtcbiAgdGFyZ2V0LnByb3RvdHlwZS5iaW5kUmVtb3ZhbFRyYWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2V0TXV0YXRpb25PYnNlcnZlckNsYXNzKCk7XG4gICAgaWYgKE11dGF0aW9uT2JzZXJ2ZXIgPT0gbnVsbCkgcmV0dXJuO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIG0xID0gMDsgbTEgPCBtdXRhdGlvbnMubGVuZ3RoOyBtMSsrKSB7XG4gICAgICAgIHZhciBtdXRhdGlvbiA9IG11dGF0aW9uc1ttMV07XG5cbiAgICAgICAgZm9yICh2YXIgbTIgPSAwOyBtMiA8IG11dGF0aW9uLnJlbW92ZWROb2Rlcy5sZW5ndGg7IG0yKyspIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IG11dGF0aW9uLnJlbW92ZWROb2Rlc1ttMl07XG5cbiAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gX3RoaXMuc3RhdGUuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgX3RoaXMuaGlkZVRvb2x0aXAoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUod2luZG93LmRvY3VtZW50LCB7XG4gICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5yZW1vdmFsVHJhY2tlciA9IG9ic2VydmVyO1xuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUudW5iaW5kUmVtb3ZhbFRyYWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucmVtb3ZhbFRyYWNrZXIpIHtcbiAgICAgIHRoaXMucmVtb3ZhbFRyYWNrZXIuZGlzY29ubmVjdCgpO1xuICAgICAgdGhpcy5yZW1vdmFsVHJhY2tlciA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb2YgdG9vbHRpcFxuICpcbiAqIEBwYXJhbXNcbiAqIC0gYGVgIHtFdmVudH0gdGhlIGV2ZW50IG9mIGN1cnJlbnQgbW91c2VcbiAqIC0gYHRhcmdldGAge0VsZW1lbnR9IHRoZSBjdXJyZW50VGFyZ2V0IG9mIHRoZSBldmVudFxuICogLSBgbm9kZWAge0RPTX0gdGhlIHJlYWN0LXRvb2x0aXAgb2JqZWN0XG4gKiAtIGBwbGFjZWAge1N0cmluZ30gdG9wIC8gcmlnaHQgLyBib3R0b20gLyBsZWZ0XG4gKiAtIGBlZmZlY3RgIHtTdHJpbmd9IGZsb2F0IC8gc29saWRcbiAqIC0gYG9mZnNldGAge09iamVjdH0gdGhlIG9mZnNldCB0byBkZWZhdWx0IHBvc2l0aW9uXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogLSBgaXNOZXdTdGF0ZWAge0Jvb2x9IHJlcXVpcmVkXG4gKiAtIGBuZXdTdGF0ZWAge09iamVjdH1cbiAqIC0gYHBvc2l0aW9uYCB7T2JqZWN0fSB7bGVmdDoge051bWJlcn0sIHRvcDoge051bWJlcn19XG4gKi9cbmZ1bmN0aW9uIGdldFBvc2l0aW9uIChlLCB0YXJnZXQsIG5vZGUsIHBsYWNlLCBkZXNpcmVkUGxhY2UsIGVmZmVjdCwgb2Zmc2V0KSB7XG4gIHZhciBfZ2V0RGltZW5zaW9ucyA9IGdldERpbWVuc2lvbnMobm9kZSksXG4gICAgICB0aXBXaWR0aCA9IF9nZXREaW1lbnNpb25zLndpZHRoLFxuICAgICAgdGlwSGVpZ2h0ID0gX2dldERpbWVuc2lvbnMuaGVpZ2h0O1xuXG4gIHZhciBfZ2V0RGltZW5zaW9uczIgPSBnZXREaW1lbnNpb25zKHRhcmdldCksXG4gICAgICB0YXJnZXRXaWR0aCA9IF9nZXREaW1lbnNpb25zMi53aWR0aCxcbiAgICAgIHRhcmdldEhlaWdodCA9IF9nZXREaW1lbnNpb25zMi5oZWlnaHQ7XG5cbiAgdmFyIF9nZXRDdXJyZW50T2Zmc2V0ID0gZ2V0Q3VycmVudE9mZnNldChlLCB0YXJnZXQsIGVmZmVjdCksXG4gICAgICBtb3VzZVggPSBfZ2V0Q3VycmVudE9mZnNldC5tb3VzZVgsXG4gICAgICBtb3VzZVkgPSBfZ2V0Q3VycmVudE9mZnNldC5tb3VzZVk7XG5cbiAgdmFyIGRlZmF1bHRPZmZzZXQgPSBnZXREZWZhdWx0UG9zaXRpb24oZWZmZWN0LCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0LCB0aXBXaWR0aCwgdGlwSGVpZ2h0KTtcblxuICB2YXIgX2NhbGN1bGF0ZU9mZnNldCA9IGNhbGN1bGF0ZU9mZnNldChvZmZzZXQpLFxuICAgICAgZXh0cmFPZmZzZXRYID0gX2NhbGN1bGF0ZU9mZnNldC5leHRyYU9mZnNldFgsXG4gICAgICBleHRyYU9mZnNldFkgPSBfY2FsY3VsYXRlT2Zmc2V0LmV4dHJhT2Zmc2V0WTtcblxuICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgdmFyIHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICB2YXIgX2dldFBhcmVudCA9IGdldFBhcmVudChub2RlKSxcbiAgICAgIHBhcmVudFRvcCA9IF9nZXRQYXJlbnQucGFyZW50VG9wLFxuICAgICAgcGFyZW50TGVmdCA9IF9nZXRQYXJlbnQucGFyZW50TGVmdDsgLy8gR2V0IHRoZSBlZGdlIG9mZnNldCBvZiB0aGUgdG9vbHRpcFxuXG5cbiAgdmFyIGdldFRpcE9mZnNldExlZnQgPSBmdW5jdGlvbiBnZXRUaXBPZmZzZXRMZWZ0KHBsYWNlKSB7XG4gICAgdmFyIG9mZnNldFggPSBkZWZhdWx0T2Zmc2V0W3BsYWNlXS5sO1xuICAgIHJldHVybiBtb3VzZVggKyBvZmZzZXRYICsgZXh0cmFPZmZzZXRYO1xuICB9O1xuXG4gIHZhciBnZXRUaXBPZmZzZXRSaWdodCA9IGZ1bmN0aW9uIGdldFRpcE9mZnNldFJpZ2h0KHBsYWNlKSB7XG4gICAgdmFyIG9mZnNldFggPSBkZWZhdWx0T2Zmc2V0W3BsYWNlXS5yO1xuICAgIHJldHVybiBtb3VzZVggKyBvZmZzZXRYICsgZXh0cmFPZmZzZXRYO1xuICB9O1xuXG4gIHZhciBnZXRUaXBPZmZzZXRUb3AgPSBmdW5jdGlvbiBnZXRUaXBPZmZzZXRUb3AocGxhY2UpIHtcbiAgICB2YXIgb2Zmc2V0WSA9IGRlZmF1bHRPZmZzZXRbcGxhY2VdLnQ7XG4gICAgcmV0dXJuIG1vdXNlWSArIG9mZnNldFkgKyBleHRyYU9mZnNldFk7XG4gIH07XG5cbiAgdmFyIGdldFRpcE9mZnNldEJvdHRvbSA9IGZ1bmN0aW9uIGdldFRpcE9mZnNldEJvdHRvbShwbGFjZSkge1xuICAgIHZhciBvZmZzZXRZID0gZGVmYXVsdE9mZnNldFtwbGFjZV0uYjtcbiAgICByZXR1cm4gbW91c2VZICsgb2Zmc2V0WSArIGV4dHJhT2Zmc2V0WTtcbiAgfTsgLy9cbiAgLy8gRnVuY3Rpb25zIHRvIHRlc3Qgd2hldGhlciB0aGUgdG9vbHRpcCdzIHNpZGVzIGFyZSBpbnNpZGVcbiAgLy8gdGhlIGNsaWVudCB3aW5kb3cgZm9yIGEgZ2l2ZW4gb3JpZW50YXRpb24gcFxuICAvL1xuICAvLyAgX19fX19fX19fX19fX1xuICAvLyB8ICAgICAgICAgICAgIHwgPC0tIFJpZ2h0IHNpZGVcbiAgLy8gfCBwID0gJ2xlZnQnICB8XFxcbiAgLy8gfCAgICAgICAgICAgICB8LyAgfFxcXG4gIC8vIHxfX19fX19fX19fX19ffCAgIHxfXFwgIDwtLSBNb3VzZVxuICAvLyAgICAgIC8gXFwgICAgICAgICAgIHxcbiAgLy8gICAgICAgfFxuICAvLyAgICAgICB8XG4gIC8vICBCb3R0b20gc2lkZVxuICAvL1xuXG5cbiAgdmFyIG91dHNpZGVMZWZ0ID0gZnVuY3Rpb24gb3V0c2lkZUxlZnQocCkge1xuICAgIHJldHVybiBnZXRUaXBPZmZzZXRMZWZ0KHApIDwgMDtcbiAgfTtcblxuICB2YXIgb3V0c2lkZVJpZ2h0ID0gZnVuY3Rpb24gb3V0c2lkZVJpZ2h0KHApIHtcbiAgICByZXR1cm4gZ2V0VGlwT2Zmc2V0UmlnaHQocCkgPiB3aW5kb3dXaWR0aDtcbiAgfTtcblxuICB2YXIgb3V0c2lkZVRvcCA9IGZ1bmN0aW9uIG91dHNpZGVUb3AocCkge1xuICAgIHJldHVybiBnZXRUaXBPZmZzZXRUb3AocCkgPCAwO1xuICB9O1xuXG4gIHZhciBvdXRzaWRlQm90dG9tID0gZnVuY3Rpb24gb3V0c2lkZUJvdHRvbShwKSB7XG4gICAgcmV0dXJuIGdldFRpcE9mZnNldEJvdHRvbShwKSA+IHdpbmRvd0hlaWdodDtcbiAgfTsgLy8gQ2hlY2sgd2hldGhlciB0aGUgdG9vbHRpcCB3aXRoIG9yaWVudGF0aW9uIHAgaXMgY29tcGxldGVseSBpbnNpZGUgdGhlIGNsaWVudCB3aW5kb3dcblxuXG4gIHZhciBvdXRzaWRlID0gZnVuY3Rpb24gb3V0c2lkZShwKSB7XG4gICAgcmV0dXJuIG91dHNpZGVMZWZ0KHApIHx8IG91dHNpZGVSaWdodChwKSB8fCBvdXRzaWRlVG9wKHApIHx8IG91dHNpZGVCb3R0b20ocCk7XG4gIH07XG5cbiAgdmFyIGluc2lkZSA9IGZ1bmN0aW9uIGluc2lkZShwKSB7XG4gICAgcmV0dXJuICFvdXRzaWRlKHApO1xuICB9O1xuXG4gIHZhciBwbGFjZXNMaXN0ID0gW1widG9wXCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCJdO1xuICB2YXIgaW5zaWRlTGlzdCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIHAgPSBwbGFjZXNMaXN0W2ldO1xuXG4gICAgaWYgKGluc2lkZShwKSkge1xuICAgICAgaW5zaWRlTGlzdC5wdXNoKHApO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc05ld1N0YXRlID0gZmFsc2U7XG4gIHZhciBuZXdQbGFjZTtcbiAgdmFyIHNob3VsZFVwZGF0ZVBsYWNlID0gZGVzaXJlZFBsYWNlICE9PSBwbGFjZTtcblxuICBpZiAoaW5zaWRlKGRlc2lyZWRQbGFjZSkgJiYgc2hvdWxkVXBkYXRlUGxhY2UpIHtcbiAgICBpc05ld1N0YXRlID0gdHJ1ZTtcbiAgICBuZXdQbGFjZSA9IGRlc2lyZWRQbGFjZTtcbiAgfSBlbHNlIGlmIChpbnNpZGVMaXN0Lmxlbmd0aCA+IDAgJiYgb3V0c2lkZShkZXNpcmVkUGxhY2UpICYmIG91dHNpZGUocGxhY2UpKSB7XG4gICAgaXNOZXdTdGF0ZSA9IHRydWU7XG4gICAgbmV3UGxhY2UgPSBpbnNpZGVMaXN0WzBdO1xuICB9XG5cbiAgaWYgKGlzTmV3U3RhdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNOZXdTdGF0ZTogdHJ1ZSxcbiAgICAgIG5ld1N0YXRlOiB7XG4gICAgICAgIHBsYWNlOiBuZXdQbGFjZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzTmV3U3RhdGU6IGZhbHNlLFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICBsZWZ0OiBwYXJzZUludChnZXRUaXBPZmZzZXRMZWZ0KHBsYWNlKSAtIHBhcmVudExlZnQsIDEwKSxcbiAgICAgIHRvcDogcGFyc2VJbnQoZ2V0VGlwT2Zmc2V0VG9wKHBsYWNlKSAtIHBhcmVudFRvcCwgMTApXG4gICAgfVxuICB9O1xufVxuXG52YXIgZ2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uIGdldERpbWVuc2lvbnMobm9kZSkge1xuICB2YXIgX25vZGUkZ2V0Qm91bmRpbmdDbGllID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGhlaWdodCA9IF9ub2RlJGdldEJvdW5kaW5nQ2xpZS5oZWlnaHQsXG4gICAgICB3aWR0aCA9IF9ub2RlJGdldEJvdW5kaW5nQ2xpZS53aWR0aDtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogcGFyc2VJbnQoaGVpZ2h0LCAxMCksXG4gICAgd2lkdGg6IHBhcnNlSW50KHdpZHRoLCAxMClcbiAgfTtcbn07IC8vIEdldCBjdXJyZW50IG1vdXNlIG9mZnNldFxuXG5cbnZhciBnZXRDdXJyZW50T2Zmc2V0ID0gZnVuY3Rpb24gZ2V0Q3VycmVudE9mZnNldChlLCBjdXJyZW50VGFyZ2V0LCBlZmZlY3QpIHtcbiAgdmFyIGJvdW5kaW5nQ2xpZW50UmVjdCA9IGN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciB0YXJnZXRUb3AgPSBib3VuZGluZ0NsaWVudFJlY3QudG9wO1xuICB2YXIgdGFyZ2V0TGVmdCA9IGJvdW5kaW5nQ2xpZW50UmVjdC5sZWZ0O1xuXG4gIHZhciBfZ2V0RGltZW5zaW9uczMgPSBnZXREaW1lbnNpb25zKGN1cnJlbnRUYXJnZXQpLFxuICAgICAgdGFyZ2V0V2lkdGggPSBfZ2V0RGltZW5zaW9uczMud2lkdGgsXG4gICAgICB0YXJnZXRIZWlnaHQgPSBfZ2V0RGltZW5zaW9uczMuaGVpZ2h0O1xuXG4gIGlmIChlZmZlY3QgPT09IFwiZmxvYXRcIikge1xuICAgIHJldHVybiB7XG4gICAgICBtb3VzZVg6IGUuY2xpZW50WCxcbiAgICAgIG1vdXNlWTogZS5jbGllbnRZXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91c2VYOiB0YXJnZXRMZWZ0ICsgdGFyZ2V0V2lkdGggLyAyLFxuICAgIG1vdXNlWTogdGFyZ2V0VG9wICsgdGFyZ2V0SGVpZ2h0IC8gMlxuICB9O1xufTsgLy8gTGlzdCBhbGwgcG9zc2liaWxpdHkgb2YgdG9vbHRpcCBmaW5hbCBvZmZzZXRcbi8vIFRoaXMgaXMgdXNlZnVsIGluIGp1ZGdpbmcgaWYgaXQgaXMgbmVjZXNzYXJ5IGZvciB0b29sdGlwIHRvIHN3aXRjaCBwb3NpdGlvbiB3aGVuIG91dCBvZiB3aW5kb3dcblxuXG52YXIgZ2V0RGVmYXVsdFBvc2l0aW9uID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFBvc2l0aW9uKGVmZmVjdCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCwgdGlwV2lkdGgsIHRpcEhlaWdodCkge1xuICB2YXIgdG9wO1xuICB2YXIgcmlnaHQ7XG4gIHZhciBib3R0b207XG4gIHZhciBsZWZ0O1xuICB2YXIgZGlzVG9Nb3VzZSA9IDM7XG4gIHZhciB0cmlhbmdsZUhlaWdodCA9IDI7XG4gIHZhciBjdXJzb3JIZWlnaHQgPSAxMjsgLy8gT3B0aW1pemUgZm9yIGZsb2F0IGJvdHRvbSBvbmx5LCBjYXVzZSB0aGUgY3Vyc29yIHdpbGwgaGlkZSB0aGUgdG9vbHRpcFxuXG4gIGlmIChlZmZlY3QgPT09IFwiZmxvYXRcIikge1xuICAgIHRvcCA9IHtcbiAgICAgIGw6IC0odGlwV2lkdGggLyAyKSxcbiAgICAgIHI6IHRpcFdpZHRoIC8gMixcbiAgICAgIHQ6IC0odGlwSGVpZ2h0ICsgZGlzVG9Nb3VzZSArIHRyaWFuZ2xlSGVpZ2h0KSxcbiAgICAgIGI6IC1kaXNUb01vdXNlXG4gICAgfTtcbiAgICBib3R0b20gPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoIC8gMiksXG4gICAgICByOiB0aXBXaWR0aCAvIDIsXG4gICAgICB0OiBkaXNUb01vdXNlICsgY3Vyc29ySGVpZ2h0LFxuICAgICAgYjogdGlwSGVpZ2h0ICsgZGlzVG9Nb3VzZSArIHRyaWFuZ2xlSGVpZ2h0ICsgY3Vyc29ySGVpZ2h0XG4gICAgfTtcbiAgICBsZWZ0ID0ge1xuICAgICAgbDogLSh0aXBXaWR0aCArIGRpc1RvTW91c2UgKyB0cmlhbmdsZUhlaWdodCksXG4gICAgICByOiAtZGlzVG9Nb3VzZSxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgICByaWdodCA9IHtcbiAgICAgIGw6IGRpc1RvTW91c2UsXG4gICAgICByOiB0aXBXaWR0aCArIGRpc1RvTW91c2UgKyB0cmlhbmdsZUhlaWdodCxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgfSBlbHNlIGlmIChlZmZlY3QgPT09IFwic29saWRcIikge1xuICAgIHRvcCA9IHtcbiAgICAgIGw6IC0odGlwV2lkdGggLyAyKSxcbiAgICAgIHI6IHRpcFdpZHRoIC8gMixcbiAgICAgIHQ6IC0odGFyZ2V0SGVpZ2h0IC8gMiArIHRpcEhlaWdodCArIHRyaWFuZ2xlSGVpZ2h0KSxcbiAgICAgIGI6IC0odGFyZ2V0SGVpZ2h0IC8gMilcbiAgICB9O1xuICAgIGJvdHRvbSA9IHtcbiAgICAgIGw6IC0odGlwV2lkdGggLyAyKSxcbiAgICAgIHI6IHRpcFdpZHRoIC8gMixcbiAgICAgIHQ6IHRhcmdldEhlaWdodCAvIDIsXG4gICAgICBiOiB0YXJnZXRIZWlnaHQgLyAyICsgdGlwSGVpZ2h0ICsgdHJpYW5nbGVIZWlnaHRcbiAgICB9O1xuICAgIGxlZnQgPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoICsgdGFyZ2V0V2lkdGggLyAyICsgdHJpYW5nbGVIZWlnaHQpLFxuICAgICAgcjogLSh0YXJnZXRXaWR0aCAvIDIpLFxuICAgICAgdDogLSh0aXBIZWlnaHQgLyAyKSxcbiAgICAgIGI6IHRpcEhlaWdodCAvIDJcbiAgICB9O1xuICAgIHJpZ2h0ID0ge1xuICAgICAgbDogdGFyZ2V0V2lkdGggLyAyLFxuICAgICAgcjogdGlwV2lkdGggKyB0YXJnZXRXaWR0aCAvIDIgKyB0cmlhbmdsZUhlaWdodCxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgYm90dG9tOiBib3R0b20sXG4gICAgbGVmdDogbGVmdCxcbiAgICByaWdodDogcmlnaHRcbiAgfTtcbn07IC8vIENvbnNpZGVyIGFkZGl0aW9uYWwgb2Zmc2V0IGludG8gcG9zaXRpb24gY2FsY3VsYXRpb25cblxuXG52YXIgY2FsY3VsYXRlT2Zmc2V0ID0gZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9mZnNldCkge1xuICB2YXIgZXh0cmFPZmZzZXRYID0gMDtcbiAgdmFyIGV4dHJhT2Zmc2V0WSA9IDA7XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkob2Zmc2V0KSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIikge1xuICAgIG9mZnNldCA9IEpTT04ucGFyc2Uob2Zmc2V0LnRvU3RyaW5nKCkucmVwbGFjZSgvJy9nLCAnXCInKSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2Zmc2V0KSB7XG4gICAgaWYgKGtleSA9PT0gXCJ0b3BcIikge1xuICAgICAgZXh0cmFPZmZzZXRZIC09IHBhcnNlSW50KG9mZnNldFtrZXldLCAxMCk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiYm90dG9tXCIpIHtcbiAgICAgIGV4dHJhT2Zmc2V0WSArPSBwYXJzZUludChvZmZzZXRba2V5XSwgMTApO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcImxlZnRcIikge1xuICAgICAgZXh0cmFPZmZzZXRYIC09IHBhcnNlSW50KG9mZnNldFtrZXldLCAxMCk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwicmlnaHRcIikge1xuICAgICAgZXh0cmFPZmZzZXRYICs9IHBhcnNlSW50KG9mZnNldFtrZXldLCAxMCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHRyYU9mZnNldFg6IGV4dHJhT2Zmc2V0WCxcbiAgICBleHRyYU9mZnNldFk6IGV4dHJhT2Zmc2V0WVxuICB9O1xufTsgLy8gR2V0IHRoZSBvZmZzZXQgb2YgdGhlIHBhcmVudCBlbGVtZW50c1xuXG5cbnZhciBnZXRQYXJlbnQgPSBmdW5jdGlvbiBnZXRQYXJlbnQoY3VycmVudFRhcmdldCkge1xuICB2YXIgY3VycmVudFBhcmVudCA9IGN1cnJlbnRUYXJnZXQ7XG5cbiAgd2hpbGUgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoY3VycmVudFBhcmVudCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKSAhPT0gXCJub25lXCIpIGJyZWFrO1xuICAgIGN1cnJlbnRQYXJlbnQgPSBjdXJyZW50UGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cblxuICB2YXIgcGFyZW50VG9wID0gY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCB8fCAwO1xuICB2YXIgcGFyZW50TGVmdCA9IGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IHx8IDA7XG4gIHJldHVybiB7XG4gICAgcGFyZW50VG9wOiBwYXJlbnRUb3AsXG4gICAgcGFyZW50TGVmdDogcGFyZW50TGVmdFxuICB9O1xufTtcblxuLyoqXG4gKiBUbyBnZXQgdGhlIHRvb2x0aXAgY29udGVudFxuICogaXQgbWF5IGNvbWVzIGZyb20gZGF0YS10aXAgb3IgdGhpcy5wcm9wcy5jaGlsZHJlblxuICogaXQgc2hvdWxkIHN1cHBvcnQgbXVsdGlsaW5lXG4gKlxuICogQHBhcmFtc1xuICogLSBgdGlwYCB7U3RyaW5nfSB2YWx1ZSBvZiBkYXRhLXRpcFxuICogLSBgY2hpbGRyZW5gIHtSZWFjdEVsZW1lbnR9IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAqIC0gYG11bHRpbGluZWAge0FueX0gY291bGQgYmUgQm9vbCh0cnVlL2ZhbHNlKSBvciBTdHJpbmcoJ3RydWUnLydmYWxzZScpXG4gKlxuICogQHJldHVyblxuICogLSBTdHJpbmcgb3IgcmVhY3QgY29tcG9uZW50XG4gKi9cbmZ1bmN0aW9uIGdldFRpcENvbnRlbnQgKHRpcCwgY2hpbGRyZW4sIGdldENvbnRlbnQsIG11bHRpbGluZSkge1xuICBpZiAoY2hpbGRyZW4pIHJldHVybiBjaGlsZHJlbjtcbiAgaWYgKGdldENvbnRlbnQgIT09IHVuZGVmaW5lZCAmJiBnZXRDb250ZW50ICE9PSBudWxsKSByZXR1cm4gZ2V0Q29udGVudDsgLy8gZ2V0Q29udGVudCBjYW4gYmUgMCwgJycsIGV0Yy5cblxuICBpZiAoZ2V0Q29udGVudCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7IC8vIFRpcCBub3QgZXhpc3QgYW5kIGNoaWxkcmVuIGlzIG51bGwgb3IgdW5kZWZpbmVkXG5cbiAgdmFyIHJlZ2V4cCA9IC88YnJcXHMqXFwvPz4vO1xuXG4gIGlmICghbXVsdGlsaW5lIHx8IG11bHRpbGluZSA9PT0gXCJmYWxzZVwiIHx8ICFyZWdleHAudGVzdCh0aXApKSB7XG4gICAgLy8gTm8gdHJpbSgpLCBzbyB0aGF0IHVzZXIgY2FuIGtlZXAgdGhlaXIgaW5wdXRcbiAgICByZXR1cm4gdGlwO1xuICB9IC8vIE11bHRpbGluZSB0b29sdGlwIGNvbnRlbnRcblxuXG4gIHJldHVybiB0aXAuc3BsaXQocmVnZXhwKS5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAga2V5OiBpLFxuICAgICAgY2xhc3NOYW1lOiBcIm11bHRpLWxpbmVcIlxuICAgIH0sIGQpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IGFyaWEtIGFuZCByb2xlIGluIFJlYWN0VG9vbHRpcFxuICpcbiAqIEBwYXJhbXMgcHJvcHMge09iamVjdH1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gcGFyc2VBcmlhKHByb3BzKSB7XG4gIHZhciBhcmlhT2JqID0ge307XG4gIE9iamVjdC5rZXlzKHByb3BzKS5maWx0ZXIoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBhcmlhLXh4eCBhbmQgcm9sZSBpcyBhY2NlcHRhYmxlXG4gICAgcmV0dXJuIC8oXmFyaWEtXFx3KyR8XnJvbGUkKS8udGVzdChwcm9wKTtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGFyaWFPYmpbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgfSk7XG4gIHJldHVybiBhcmlhT2JqO1xufVxuXG4vKipcbiAqIENvbnZlcnQgbm9kZWxpc3QgdG8gYXJyYXlcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9lNjZiYTIwYWQ1YmU0MzNlYjU0NDIzZjJiMDk3ZDgyOTMyNGQ5ZGU2L3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvY3JlYXRlQXJyYXlGcm9tTWl4ZWQuanMjTDI0XG4gKiBOb2RlTGlzdHMgYXJlIGZ1bmN0aW9ucyBpbiBTYWZhcmlcbiAqL1xuZnVuY3Rpb24gbm9kZUxpc3RUb0FycmF5IChub2RlTGlzdCkge1xuICB2YXIgbGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoO1xuXG4gIGlmIChub2RlTGlzdC5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChub2RlTGlzdCk7XG4gIH1cblxuICByZXR1cm4gbmV3IEFycmF5KGxlbmd0aCkuZmlsbCgpLm1hcChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gbm9kZUxpc3RbaW5kZXhdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xuICByZXR1cm4gXCJ0XCIgKyB2NCgpO1xufVxuXG5fX18kaW5zZXJ0U3R5bGUoXCIuX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcCB7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBsZWZ0OiAtOTk5ZW07XFxuICBvcGFjaXR5OiAwO1xcbiAgcGFkZGluZzogOHB4IDIxcHg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBlYXNlLW91dDtcXG4gIHRvcDogLTk5OWVtO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgei1pbmRleDogOTk5O1xcbn1cXG4uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5hbGxvd19ob3ZlciwgLl9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAuYWxsb3dfY2xpY2sge1xcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XFxufVxcbi5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwOjpiZWZvcmUsIC5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwOjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5zaG93IHtcXG4gIG9wYWNpdHk6IDAuOTtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tbGVmdDogMDtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxufVxcbi5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLXRvcDo6YmVmb3JlIHtcXG4gIGJvcmRlci1sZWZ0OiAxMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJpZ2h0OiAxMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm90dG9tOiAtOHB4O1xcbiAgbGVmdDogNTAlO1xcbiAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbn1cXG4uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1ib3R0b206OmJlZm9yZSB7XFxuICBib3JkZXItbGVmdDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yaWdodDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIHRvcDogLThweDtcXG4gIGxlZnQ6IDUwJTtcXG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcXG59XFxuLl9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtbGVmdDo6YmVmb3JlIHtcXG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIHJpZ2h0OiAtOHB4O1xcbiAgdG9wOiA1MCU7XFxuICBtYXJnaW4tdG9wOiAtNXB4O1xcbn1cXG4uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1yaWdodDo6YmVmb3JlIHtcXG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGxlZnQ6IC04cHg7XFxuICB0b3A6IDUwJTtcXG4gIG1hcmdpbi10b3A6IC01cHg7XFxufVxcbi5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwIC5tdWx0aS1saW5lIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMnB4IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVwiKTtcblxuLyoqXG4gKiBEZWZhdWx0IHBvcC11cCBzdHlsZSB2YWx1ZXMgKHRleHQgY29sb3IsIGJhY2tncm91bmQgY29sb3IpLlxuICovXG52YXIgZGVmYXVsdENvbG9ycyA9IHtcbiAgXCJkYXJrXCI6IHtcbiAgICBcInRleHRcIjogXCIjZmZmXCIsXG4gICAgXCJiYWNrZ3JvdW5kXCI6IFwiIzIyMlwiLFxuICAgIFwiYm9yZGVyXCI6IFwidHJhbnNwYXJlbnRcIixcbiAgICBcImFycm93XCI6IFwiIzIyMlwiXG4gIH0sXG4gIFwic3VjY2Vzc1wiOiB7XG4gICAgXCJ0ZXh0XCI6IFwiI2ZmZlwiLFxuICAgIFwiYmFja2dyb3VuZFwiOiBcIiM4REM1NzJcIixcbiAgICBcImJvcmRlclwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgXCJhcnJvd1wiOiBcIiM4REM1NzJcIlxuICB9LFxuICBcIndhcm5pbmdcIjoge1xuICAgIFwidGV4dFwiOiBcIiNmZmZcIixcbiAgICBcImJhY2tncm91bmRcIjogXCIjRjBBRDRFXCIsXG4gICAgXCJib3JkZXJcIjogXCJ0cmFuc3BhcmVudFwiLFxuICAgIFwiYXJyb3dcIjogXCIjRjBBRDRFXCJcbiAgfSxcbiAgXCJlcnJvclwiOiB7XG4gICAgXCJ0ZXh0XCI6IFwiI2ZmZlwiLFxuICAgIFwiYmFja2dyb3VuZFwiOiBcIiNCRTY0NjRcIixcbiAgICBcImJvcmRlclwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgXCJhcnJvd1wiOiBcIiNCRTY0NjRcIlxuICB9LFxuICBcImluZm9cIjoge1xuICAgIFwidGV4dFwiOiBcIiNmZmZcIixcbiAgICBcImJhY2tncm91bmRcIjogXCIjMzM3QUI3XCIsXG4gICAgXCJib3JkZXJcIjogXCJ0cmFuc3BhcmVudFwiLFxuICAgIFwiYXJyb3dcIjogXCIjMzM3QUI3XCJcbiAgfSxcbiAgXCJsaWdodFwiOiB7XG4gICAgXCJ0ZXh0XCI6IFwiIzIyMlwiLFxuICAgIFwiYmFja2dyb3VuZFwiOiBcIiNmZmZcIixcbiAgICBcImJvcmRlclwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgXCJhcnJvd1wiOiBcIiNmZmZcIlxuICB9XG59O1xuZnVuY3Rpb24gZ2V0RGVmYXVsdFBvcHVwQ29sb3JzKHR5cGUpIHtcbiAgcmV0dXJuIGRlZmF1bHRDb2xvcnNbdHlwZV0gPyBfb2JqZWN0U3ByZWFkMih7fSwgZGVmYXVsdENvbG9yc1t0eXBlXSkgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuKiBHZW5lcmF0ZXMgdGhlIHNwZWNpZmljIHRvb2x0aXAgc3R5bGUgZm9yIHVzZSBvbiByZW5kZXIuXG4qL1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVRvb2x0aXBTdHlsZSh1dWlkLCBjdXN0b21Db2xvcnMsIHR5cGUsIGhhc0JvcmRlcikge1xuICByZXR1cm4gZ2VuZXJhdGVTdHlsZSh1dWlkLCBnZXRQb3B1cENvbG9ycyhjdXN0b21Db2xvcnMsIHR5cGUsIGhhc0JvcmRlcikpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIHRvb2x0aXAgc3R5bGUgcnVsZXMgYmFzZWQgb24gdGhlIGVsZW1lbnQtc3BlY2lmaWVkIFwiZGF0YS10eXBlXCIgcHJvcGVydHkuXG4gKi9cblxuZnVuY3Rpb24gZ2VuZXJhdGVTdHlsZSh1dWlkLCBjb2xvcnMpIHtcbiAgdmFyIHRleHRDb2xvciA9IGNvbG9ycy50ZXh0O1xuICB2YXIgYmFja2dyb3VuZENvbG9yID0gY29sb3JzLmJhY2tncm91bmQ7XG4gIHZhciBib3JkZXJDb2xvciA9IGNvbG9ycy5ib3JkZXI7XG4gIHZhciBhcnJvd0NvbG9yID0gY29sb3JzLmFycm93O1xuICByZXR1cm4gXCJcXG4gIFxcdC5cIi5jb25jYXQodXVpZCwgXCIge1xcblxcdCAgICBjb2xvcjogXCIpLmNvbmNhdCh0ZXh0Q29sb3IsIFwiO1xcblxcdCAgICBiYWNrZ3JvdW5kOiBcIikuY29uY2F0KGJhY2tncm91bmRDb2xvciwgXCI7XFxuXFx0ICAgIGJvcmRlcjogMXB4IHNvbGlkIFwiKS5jb25jYXQoYm9yZGVyQ29sb3IsIFwiO1xcbiAgXFx0fVxcblxcbiAgXFx0LlwiKS5jb25jYXQodXVpZCwgXCIucGxhY2UtdG9wIHtcXG4gICAgICAgIG1hcmdpbi10b3A6IC0xMHB4O1xcbiAgICB9XFxuICAgIC5cIikuY29uY2F0KHV1aWQsIFwiLnBsYWNlLXRvcDo6YmVmb3JlIHtcXG4gICAgICAgIGJvcmRlci10b3A6IDhweCBzb2xpZCBcIikuY29uY2F0KGJvcmRlckNvbG9yLCBcIjtcXG4gICAgfVxcbiAgICAuXCIpLmNvbmNhdCh1dWlkLCBcIi5wbGFjZS10b3A6OmFmdGVyIHtcXG4gICAgICAgIGJvcmRlci1sZWZ0OiA4cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgICBib3JkZXItcmlnaHQ6IDhweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICAgIGJvdHRvbTogLTZweDtcXG4gICAgICAgIGxlZnQ6IDUwJTtcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAtOHB4O1xcbiAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogXCIpLmNvbmNhdChhcnJvd0NvbG9yLCBcIjtcXG4gICAgICAgIGJvcmRlci10b3Atc3R5bGU6IHNvbGlkO1xcbiAgICAgICAgYm9yZGVyLXRvcC13aWR0aDogNnB4O1xcbiAgICB9XFxuXFxuICAgIC5cIikuY29uY2F0KHV1aWQsIFwiLnBsYWNlLWJvdHRvbSB7XFxuICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgICB9XFxuICAgIC5cIikuY29uY2F0KHV1aWQsIFwiLnBsYWNlLWJvdHRvbTo6YmVmb3JlIHtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IDhweCBzb2xpZCBcIikuY29uY2F0KGJvcmRlckNvbG9yLCBcIjtcXG4gICAgfVxcbiAgICAuXCIpLmNvbmNhdCh1dWlkLCBcIi5wbGFjZS1ib3R0b206OmFmdGVyIHtcXG4gICAgICAgIGJvcmRlci1sZWZ0OiA4cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgICBib3JkZXItcmlnaHQ6IDhweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICAgIHRvcDogLTZweDtcXG4gICAgICAgIGxlZnQ6IDUwJTtcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAtOHB4O1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogXCIpLmNvbmNhdChhcnJvd0NvbG9yLCBcIjtcXG4gICAgICAgIGJvcmRlci1ib3R0b20tc3R5bGU6IHNvbGlkO1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogNnB4O1xcbiAgICB9XFxuXFxuICAgIC5cIikuY29uY2F0KHV1aWQsIFwiLnBsYWNlLWxlZnQge1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbiAgICB9XFxuICAgIC5cIikuY29uY2F0KHV1aWQsIFwiLnBsYWNlLWxlZnQ6OmJlZm9yZSB7XFxuICAgICAgICBib3JkZXItbGVmdDogOHB4IHNvbGlkIFwiKS5jb25jYXQoYm9yZGVyQ29sb3IsIFwiO1xcbiAgICB9XFxuICAgIC5cIikuY29uY2F0KHV1aWQsIFwiLnBsYWNlLWxlZnQ6OmFmdGVyIHtcXG4gICAgICAgIGJvcmRlci10b3A6IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICAgIHJpZ2h0OiAtNnB4O1xcbiAgICAgICAgdG9wOiA1MCU7XFxuICAgICAgICBtYXJnaW4tdG9wOiAtNHB4O1xcbiAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IFwiKS5jb25jYXQoYXJyb3dDb2xvciwgXCI7XFxuICAgICAgICBib3JkZXItbGVmdC1zdHlsZTogc29saWQ7XFxuICAgICAgICBib3JkZXItbGVmdC13aWR0aDogNnB4O1xcbiAgICB9XFxuXFxuICAgIC5cIikuY29uY2F0KHV1aWQsIFwiLnBsYWNlLXJpZ2h0IHtcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbiAgICB9XFxuICAgIC5cIikuY29uY2F0KHV1aWQsIFwiLnBsYWNlLXJpZ2h0OjpiZWZvcmUge1xcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiA4cHggc29saWQgXCIpLmNvbmNhdChib3JkZXJDb2xvciwgXCI7XFxuICAgIH1cXG4gICAgLlwiKS5jb25jYXQodXVpZCwgXCIucGxhY2UtcmlnaHQ6OmFmdGVyIHtcXG4gICAgICAgIGJvcmRlci10b3A6IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICAgIGxlZnQ6IC02cHg7XFxuICAgICAgICB0b3A6IDUwJTtcXG4gICAgICAgIG1hcmdpbi10b3A6IC00cHg7XFxuICAgICAgICBib3JkZXItcmlnaHQtY29sb3I6IFwiKS5jb25jYXQoYXJyb3dDb2xvciwgXCI7XFxuICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkO1xcbiAgICAgICAgYm9yZGVyLXJpZ2h0LXdpZHRoOiA2cHg7XFxuICAgIH1cXG4gIFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9wdXBDb2xvcnMoY3VzdG9tQ29sb3JzLCB0eXBlLCBoYXNCb3JkZXIpIHtcbiAgdmFyIHRleHRDb2xvciA9IGN1c3RvbUNvbG9ycy50ZXh0O1xuICB2YXIgYmFja2dyb3VuZENvbG9yID0gY3VzdG9tQ29sb3JzLmJhY2tncm91bmQ7XG4gIHZhciBib3JkZXJDb2xvciA9IGN1c3RvbUNvbG9ycy5ib3JkZXI7XG4gIHZhciBhcnJvd0NvbG9yID0gY3VzdG9tQ29sb3JzLmFycm93ID8gY3VzdG9tQ29sb3JzLmFycm93IDogY3VzdG9tQ29sb3JzLmJhY2tncm91bmQ7XG4gIHZhciBjb2xvcnMgPSBnZXREZWZhdWx0UG9wdXBDb2xvcnModHlwZSk7XG5cbiAgaWYgKHRleHRDb2xvcikge1xuICAgIGNvbG9ycy50ZXh0ID0gdGV4dENvbG9yO1xuICB9XG5cbiAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgIGNvbG9ycy5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZENvbG9yO1xuICB9XG5cbiAgaWYgKGhhc0JvcmRlcikge1xuICAgIGlmIChib3JkZXJDb2xvcikge1xuICAgICAgY29sb3JzLmJvcmRlciA9IGJvcmRlckNvbG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2xvcnMuYm9yZGVyID0gdHlwZSA9PT0gXCJsaWdodFwiID8gXCJibGFja1wiIDogXCJ3aGl0ZVwiO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcnJvd0NvbG9yKSB7XG4gICAgY29sb3JzLmFycm93ID0gYXJyb3dDb2xvcjtcbiAgfVxuXG4gIHJldHVybiBjb2xvcnM7XG59XG5cbnZhciBfY2xhc3MsIF9jbGFzczIsIF90ZW1wO1xuXG52YXIgUmVhY3RUb29sdGlwID0gc3RhdGljTWV0aG9kcyhfY2xhc3MgPSB3aW5kb3dMaXN0ZW5lcihfY2xhc3MgPSBjdXN0b21FdmVudChfY2xhc3MgPSBpc0NhcHR1cmUoX2NsYXNzID0gZ2V0RWZmZWN0KF9jbGFzcyA9IGJvZHlNb2RlKF9jbGFzcyA9IHRyYWNrUmVtb3ZhbChfY2xhc3MgPSAoX3RlbXAgPSBfY2xhc3MyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWFjdFRvb2x0aXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIF9jcmVhdGVDbGFzcyhSZWFjdFRvb2x0aXAsIG51bGwsIFt7XG4gICAga2V5OiBcInByb3BUeXBlc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXVpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gICAgICAgIHBsYWNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBlZmZlY3Q6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIG9mZnNldDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgYm9yZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgdGV4dENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGJvcmRlckNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBhcnJvd0NvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBpbnNlY3VyZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIFwiY2xhc3NcIjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaHRtbDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGRlbGF5SGlkZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgZGVsYXlVcGRhdGU6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgIGRlbGF5U2hvdzogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgZXZlbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGV2ZW50T2ZmOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBpc0NhcHR1cmU6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICBnbG9iYWxFdmVudE9mZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZ2V0Q29udGVudDogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgYWZ0ZXJTaG93OiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgYWZ0ZXJIaWRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgb3ZlcnJpZGVQb3NpdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIGRpc2FibGU6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICBzY3JvbGxIaWRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgcmVzaXplSGlkZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIHdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGJvZHlNb2RlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgcG9zc2libGVDdXN0b21FdmVudHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHBvc3NpYmxlQ3VzdG9tRXZlbnRzT2ZmOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBjbGlja2FibGU6IFByb3BUeXBlcy5ib29sXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIFJlYWN0VG9vbHRpcChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWFjdFRvb2x0aXApO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUmVhY3RUb29sdGlwKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB1dWlkOiBwcm9wcy51dWlkIHx8IGdlbmVyYXRlVVVJRCgpLFxuICAgICAgcGxhY2U6IHByb3BzLnBsYWNlIHx8IFwidG9wXCIsXG4gICAgICAvLyBEaXJlY3Rpb24gb2YgdG9vbHRpcFxuICAgICAgZGVzaXJlZFBsYWNlOiBwcm9wcy5wbGFjZSB8fCBcInRvcFwiLFxuICAgICAgdHlwZTogXCJkYXJrXCIsXG4gICAgICAvLyBDb2xvciB0aGVtZSBvZiB0b29sdGlwXG4gICAgICBlZmZlY3Q6IFwiZmxvYXRcIixcbiAgICAgIC8vIGZsb2F0IG9yIGZpeGVkXG4gICAgICBzaG93OiBmYWxzZSxcbiAgICAgIGJvcmRlcjogZmFsc2UsXG4gICAgICBjdXN0b21Db2xvcnM6IHt9LFxuICAgICAgb2Zmc2V0OiB7fSxcbiAgICAgIGV4dHJhQ2xhc3M6IFwiXCIsXG4gICAgICBodG1sOiBmYWxzZSxcbiAgICAgIGRlbGF5SGlkZTogMCxcbiAgICAgIGRlbGF5U2hvdzogMCxcbiAgICAgIGV2ZW50OiBwcm9wcy5ldmVudCB8fCBudWxsLFxuICAgICAgZXZlbnRPZmY6IHByb3BzLmV2ZW50T2ZmIHx8IG51bGwsXG4gICAgICBjdXJyZW50RXZlbnQ6IG51bGwsXG4gICAgICAvLyBDdXJyZW50IG1vdXNlIGV2ZW50XG4gICAgICBjdXJyZW50VGFyZ2V0OiBudWxsLFxuICAgICAgLy8gQ3VycmVudCB0YXJnZXQgb2YgbW91c2UgZXZlbnRcbiAgICAgIGFyaWFQcm9wczogcGFyc2VBcmlhKHByb3BzKSxcbiAgICAgIC8vIGFyaWEtIGFuZCByb2xlIGF0dHJpYnV0ZXNcbiAgICAgIGlzRW1wdHlUaXA6IGZhbHNlLFxuICAgICAgZGlzYWJsZTogZmFsc2UsXG4gICAgICBwb3NzaWJsZUN1c3RvbUV2ZW50czogcHJvcHMucG9zc2libGVDdXN0b21FdmVudHMgfHwgXCJcIixcbiAgICAgIHBvc3NpYmxlQ3VzdG9tRXZlbnRzT2ZmOiBwcm9wcy5wb3NzaWJsZUN1c3RvbUV2ZW50c09mZiB8fCBcIlwiLFxuICAgICAgb3JpZ2luVG9vbHRpcDogbnVsbCxcbiAgICAgIGlzTXVsdGlsaW5lOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5iaW5kKFtcInNob3dUb29sdGlwXCIsIFwidXBkYXRlVG9vbHRpcFwiLCBcImhpZGVUb29sdGlwXCIsIFwiaGlkZVRvb2x0aXBPblNjcm9sbFwiLCBcImdldFRvb2x0aXBDb250ZW50XCIsIFwiZ2xvYmFsUmVidWlsZFwiLCBcImdsb2JhbFNob3dcIiwgXCJnbG9iYWxIaWRlXCIsIFwib25XaW5kb3dSZXNpemVcIiwgXCJtb3VzZU9uVG9vbFRpcFwiXSk7XG5cbiAgICBfdGhpcy5tb3VudCA9IHRydWU7XG4gICAgX3RoaXMuZGVsYXlTaG93TG9vcCA9IG51bGw7XG4gICAgX3RoaXMuZGVsYXlIaWRlTG9vcCA9IG51bGw7XG4gICAgX3RoaXMuZGVsYXlSZXNob3cgPSBudWxsO1xuICAgIF90aGlzLmludGVydmFsVXBkYXRlQ29udGVudCA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBGb3IgdW5pZnkgdGhlIGJpbmQgYW5kIHVuYmluZCBsaXN0ZW5lclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhSZWFjdFRvb2x0aXAsIFt7XG4gICAga2V5OiBcImJpbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZChtZXRob2RBcnJheSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIG1ldGhvZEFycmF5LmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICBfdGhpczJbbWV0aG9kXSA9IF90aGlzMlttZXRob2RdLmJpbmQoX3RoaXMyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5zZWN1cmUgPSBfdGhpcyRwcm9wcy5pbnNlY3VyZSxcbiAgICAgICAgICByZXNpemVIaWRlID0gX3RoaXMkcHJvcHMucmVzaXplSGlkZTtcbiAgICAgIHRoaXMuYmluZExpc3RlbmVyKCk7IC8vIEJpbmQgbGlzdGVuZXIgZm9yIHRvb2x0aXBcblxuICAgICAgdGhpcy5iaW5kV2luZG93RXZlbnRzKHJlc2l6ZUhpZGUpOyAvLyBCaW5kIGdsb2JhbCBldmVudCBmb3Igc3RhdGljIG1ldGhvZFxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuICAgICAgdGhpcy51bmJpbmRMaXN0ZW5lcigpO1xuICAgICAgdGhpcy5yZW1vdmVTY3JvbGxMaXN0ZW5lcih0aGlzLnN0YXRlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgdGhpcy51bmJpbmRXaW5kb3dFdmVudHMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGlmIHRoZSBtb3VzZSBpcyBvbiB0aGUgdG9vbHRpcC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSAtIG1vdXNlIGlzIG9uIHRoZSB0b29sdGlwXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJtb3VzZU9uVG9vbFRpcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VzZU9uVG9vbFRpcCgpIHtcbiAgICAgIHZhciBzaG93ID0gdGhpcy5zdGF0ZS5zaG93O1xuXG4gICAgICBpZiAoc2hvdyAmJiB0aGlzLnRvb2x0aXBSZWYpIHtcbiAgICAgICAgLyogb2xkIElFIG9yIEZpcmVmb3ggd29yayBhcm91bmQgKi9cbiAgICAgICAgaWYgKCF0aGlzLnRvb2x0aXBSZWYubWF0Y2hlcykge1xuICAgICAgICAgIC8qIG9sZCBJRSB3b3JrIGFyb3VuZCAqL1xuICAgICAgICAgIGlmICh0aGlzLnRvb2x0aXBSZWYubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcFJlZi5tYXRjaGVzID0gdGhpcy50b29sdGlwUmVmLm1zTWF0Y2hlc1NlbGVjdG9yO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvKiBvbGQgRmlyZWZveCB3b3JrIGFyb3VuZCAqL1xuICAgICAgICAgICAgdGhpcy50b29sdGlwUmVmLm1hdGNoZXMgPSB0aGlzLnRvb2x0aXBSZWYubW96TWF0Y2hlc1NlbGVjdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXBSZWYubWF0Y2hlcyhcIjpob3ZlclwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQaWNrIG91dCBjb3JyZXNwb25kZWQgdGFyZ2V0IGVsZW1lbnRzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRUYXJnZXRBcnJheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUYXJnZXRBcnJheShpZCkge1xuICAgICAgdmFyIHRhcmdldEFycmF5ID0gW107XG4gICAgICB2YXIgc2VsZWN0b3I7XG5cbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBcIltkYXRhLXRpcF06bm90KFtkYXRhLWZvcl0pXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXNjYXBlZCA9IGlkLnJlcGxhY2UoL1xcXFwvZywgXCJcXFxcXFxcXFwiKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyk7XG4gICAgICAgIHNlbGVjdG9yID0gXCJbZGF0YS10aXBdW2RhdGEtZm9yPVxcXCJcIi5jb25jYXQoZXNjYXBlZCwgXCJcXFwiXVwiKTtcbiAgICAgIH0gLy8gU2NhbiBkb2N1bWVudCBmb3Igc2hhZG93IERPTSBlbGVtZW50c1xuXG5cbiAgICAgIG5vZGVMaXN0VG9BcnJheShkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikpLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5zaGFkb3dSb290O1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB0YXJnZXRBcnJheSA9IHRhcmdldEFycmF5LmNvbmNhdChub2RlTGlzdFRvQXJyYXkoZWxlbWVudC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0YXJnZXRBcnJheS5jb25jYXQobm9kZUxpc3RUb0FycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJpbmQgbGlzdGVuZXIgdG8gdGhlIHRhcmdldCBlbGVtZW50c1xuICAgICAqIFRoZXNlIGxpc3RlbmVycyB1c2VkIHRvIHRyaWdnZXIgc2hvd2luZyBvciBoaWRpbmcgdGhlIHRvb2x0aXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImJpbmRMaXN0ZW5lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBiaW5kTGlzdGVuZXIoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wczIuaWQsXG4gICAgICAgICAgZ2xvYmFsRXZlbnRPZmYgPSBfdGhpcyRwcm9wczIuZ2xvYmFsRXZlbnRPZmYsXG4gICAgICAgICAgaXNDYXB0dXJlID0gX3RoaXMkcHJvcHMyLmlzQ2FwdHVyZTtcbiAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRoaXMuZ2V0VGFyZ2V0QXJyYXkoaWQpO1xuICAgICAgdGFyZ2V0QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiY3VycmVudEl0ZW1cIikgPT09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwiY3VycmVudEl0ZW1cIiwgXCJmYWxzZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMy51bmJpbmRCYXNpY0xpc3RlbmVyKHRhcmdldCk7XG5cbiAgICAgICAgaWYgKF90aGlzMy5pc0N1c3RvbUV2ZW50KHRhcmdldCkpIHtcbiAgICAgICAgICBfdGhpczMuY3VzdG9tVW5iaW5kTGlzdGVuZXIodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmlzQm9keU1vZGUoKSkge1xuICAgICAgICB0aGlzLmJpbmRCb2R5TGlzdGVuZXIodGFyZ2V0QXJyYXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgdmFyIGlzQ2FwdHVyZU1vZGUgPSBfdGhpczMuaXNDYXB0dXJlKHRhcmdldCk7XG5cbiAgICAgICAgICB2YXIgZWZmZWN0ID0gX3RoaXMzLmdldEVmZmVjdCh0YXJnZXQpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMy5pc0N1c3RvbUV2ZW50KHRhcmdldCkpIHtcbiAgICAgICAgICAgIF90aGlzMy5jdXN0b21CaW5kTGlzdGVuZXIodGFyZ2V0KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBfdGhpczMuc2hvd1Rvb2x0aXAsIGlzQ2FwdHVyZU1vZGUpO1xuXG4gICAgICAgICAgaWYgKGVmZmVjdCA9PT0gXCJmbG9hdFwiKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBfdGhpczMudXBkYXRlVG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIF90aGlzMy5oaWRlVG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBHbG9iYWwgZXZlbnQgdG8gaGlkZSB0b29sdGlwXG5cblxuICAgICAgaWYgKGdsb2JhbEV2ZW50T2ZmKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGdsb2JhbEV2ZW50T2ZmLCB0aGlzLmhpZGVUb29sdGlwKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZ2xvYmFsRXZlbnRPZmYsIHRoaXMuaGlkZVRvb2x0aXAsIGlzQ2FwdHVyZSk7XG4gICAgICB9IC8vIFRyYWNrIHJlbW92YWwgb2YgdGFyZ2V0QXJyYXkgZWxlbWVudHMgZnJvbSBET01cblxuXG4gICAgICB0aGlzLmJpbmRSZW1vdmFsVHJhY2tlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbmJpbmQgbGlzdGVuZXJzIG9uIHRhcmdldCBlbGVtZW50c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidW5iaW5kTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kTGlzdGVuZXIoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wczMuaWQsXG4gICAgICAgICAgZ2xvYmFsRXZlbnRPZmYgPSBfdGhpcyRwcm9wczMuZ2xvYmFsRXZlbnRPZmY7XG5cbiAgICAgIGlmICh0aGlzLmlzQm9keU1vZGUoKSkge1xuICAgICAgICB0aGlzLnVuYmluZEJvZHlMaXN0ZW5lcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhcmdldEFycmF5ID0gdGhpcy5nZXRUYXJnZXRBcnJheShpZCk7XG4gICAgICAgIHRhcmdldEFycmF5LmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgIF90aGlzNC51bmJpbmRCYXNpY0xpc3RlbmVyKHRhcmdldCk7XG5cbiAgICAgICAgICBpZiAoX3RoaXM0LmlzQ3VzdG9tRXZlbnQodGFyZ2V0KSkgX3RoaXM0LmN1c3RvbVVuYmluZExpc3RlbmVyKHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2xvYmFsRXZlbnRPZmYpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGdsb2JhbEV2ZW50T2ZmLCB0aGlzLmhpZGVUb29sdGlwKTtcbiAgICAgIHRoaXMudW5iaW5kUmVtb3ZhbFRyYWNrZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlIHRoaXMgYmVmb3JlIGJpbmQgbGlzdGVuZXIgYW5kIHVubW91bnQgdGhlIGNvbXBvbmVudFxuICAgICAqIGl0IGlzIG5lY2Vzc2FyeSB0byBpbnZva2UgdGhpcyBldmVuIHdoZW4gYmluZGluZyBjdXN0b20gZXZlbnRcbiAgICAgKiBzbyB0aGF0IHRoZSB0b29sdGlwIGNhbiBzd2l0Y2ggYmV0d2VlbiBjdXN0b20gYW5kIGRlZmF1bHQgbGlzdGVuZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVuYmluZEJhc2ljTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kQmFzaWNMaXN0ZW5lcih0YXJnZXQpIHtcbiAgICAgIHZhciBpc0NhcHR1cmVNb2RlID0gdGhpcy5pc0NhcHR1cmUodGFyZ2V0KTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLnNob3dUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMudXBkYXRlVG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5oaWRlVG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFRvb2x0aXBDb250ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRvb2x0aXBDb250ZW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZ2V0Q29udGVudCA9IF90aGlzJHByb3BzNC5nZXRDb250ZW50LFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM0LmNoaWxkcmVuOyAvLyBHZW5lcmF0ZSB0b29sdGlwIGNvbnRlbnRcblxuICAgICAgdmFyIGNvbnRlbnQ7XG5cbiAgICAgIGlmIChnZXRDb250ZW50KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGdldENvbnRlbnQpKSB7XG4gICAgICAgICAgY29udGVudCA9IGdldENvbnRlbnRbMF0gJiYgZ2V0Q29udGVudFswXSh0aGlzLnN0YXRlLm9yaWdpblRvb2x0aXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRlbnQgPSBnZXRDb250ZW50KHRoaXMuc3RhdGUub3JpZ2luVG9vbHRpcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFRpcENvbnRlbnQodGhpcy5zdGF0ZS5vcmlnaW5Ub29sdGlwLCBjaGlsZHJlbiwgY29udGVudCwgdGhpcy5zdGF0ZS5pc011bHRpbGluZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzRW1wdHlUaXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNFbXB0eVRpcChwbGFjZWhvbGRlcikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBwbGFjZWhvbGRlciA9PT0gXCJzdHJpbmdcIiAmJiBwbGFjZWhvbGRlciA9PT0gXCJcIiB8fCBwbGFjZWhvbGRlciA9PT0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiBtb3VzZSBlbnRlciwgc2hvdyB0aGUgdG9vbHRpcFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2hvd1Rvb2x0aXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd1Rvb2x0aXAoZSwgaXNHbG9iYWxDYWxsKSB7XG4gICAgICBpZiAoaXNHbG9iYWxDYWxsKSB7XG4gICAgICAgIC8vIERvbid0IHRyaWdnZXIgb3RoZXIgZWxlbWVudHMgYmVsb25ncyB0byBvdGhlciBSZWFjdFRvb2x0aXBcbiAgICAgICAgdmFyIHRhcmdldEFycmF5ID0gdGhpcy5nZXRUYXJnZXRBcnJheSh0aGlzLnByb3BzLmlkKTtcbiAgICAgICAgdmFyIGlzTXlFbGVtZW50ID0gdGFyZ2V0QXJyYXkuc29tZShmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZSA9PT0gZS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc015RWxlbWVudCkgcmV0dXJuO1xuICAgICAgfSAvLyBHZXQgdGhlIHRvb2x0aXAgY29udGVudFxuICAgICAgLy8gY2FsY3VsYXRlIGluIHRoaXMgcGhyYXNlIHNvIHRoYXQgdGlwIHdpZHRoIGhlaWdodCBjYW4gYmUgZGV0ZWN0ZWRcblxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBtdWx0aWxpbmUgPSBfdGhpcyRwcm9wczUubXVsdGlsaW5lLFxuICAgICAgICAgIGdldENvbnRlbnQgPSBfdGhpcyRwcm9wczUuZ2V0Q29udGVudDtcbiAgICAgIHZhciBvcmlnaW5Ub29sdGlwID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdGlwXCIpO1xuICAgICAgdmFyIGlzTXVsdGlsaW5lID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtbXVsdGlsaW5lXCIpIHx8IG11bHRpbGluZSB8fCBmYWxzZTsgLy8gSWYgaXQgaXMgZm9jdXMgZXZlbnQgb3IgY2FsbGVkIGJ5IFJlYWN0VG9vbHRpcC5zaG93LCBzd2l0Y2ggdG8gYHNvbGlkYCBlZmZlY3RcblxuICAgICAgdmFyIHN3aXRjaFRvU29saWQgPSBlIGluc3RhbmNlb2Ygd2luZG93LkZvY3VzRXZlbnQgfHwgaXNHbG9iYWxDYWxsOyAvLyBpZiBpdCBuZWVkcyB0byBza2lwIGFkZGluZyBoaWRlIGxpc3RlbmVyIHRvIHNjcm9sbFxuXG4gICAgICB2YXIgc2Nyb2xsSGlkZSA9IHRydWU7XG5cbiAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zY3JvbGwtaGlkZVwiKSkge1xuICAgICAgICBzY3JvbGxIaWRlID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsLWhpZGVcIikgPT09IFwidHJ1ZVwiO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNjcm9sbEhpZGUgIT0gbnVsbCkge1xuICAgICAgICBzY3JvbGxIaWRlID0gdGhpcy5wcm9wcy5zY3JvbGxIaWRlO1xuICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIGNvcnJlY3QgcGxhY2UgaXMgc2V0XG5cblxuICAgICAgdmFyIGRlc2lyZWRQbGFjZSA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBsYWNlXCIpIHx8IHRoaXMucHJvcHMucGxhY2UgfHwgXCJ0b3BcIjtcbiAgICAgIHZhciBlZmZlY3QgPSBzd2l0Y2hUb1NvbGlkICYmIFwic29saWRcIiB8fCB0aGlzLmdldEVmZmVjdChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgdmFyIG9mZnNldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9mZnNldFwiKSB8fCB0aGlzLnByb3BzLm9mZnNldCB8fCB7fTtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRQb3NpdGlvbihlLCBlLmN1cnJlbnRUYXJnZXQsIHRoaXMudG9vbHRpcFJlZiwgZGVzaXJlZFBsYWNlLCBkZXNpcmVkUGxhY2UsIGVmZmVjdCwgb2Zmc2V0KTtcblxuICAgICAgaWYgKHJlc3VsdC5wb3NpdGlvbiAmJiB0aGlzLnByb3BzLm92ZXJyaWRlUG9zaXRpb24pIHtcbiAgICAgICAgcmVzdWx0LnBvc2l0aW9uID0gdGhpcy5wcm9wcy5vdmVycmlkZVBvc2l0aW9uKHJlc3VsdC5wb3NpdGlvbiwgZSwgZS5jdXJyZW50VGFyZ2V0LCB0aGlzLnRvb2x0aXBSZWYsIGRlc2lyZWRQbGFjZSwgZGVzaXJlZFBsYWNlLCBlZmZlY3QsIG9mZnNldCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwbGFjZSA9IHJlc3VsdC5pc05ld1N0YXRlID8gcmVzdWx0Lm5ld1N0YXRlLnBsYWNlIDogZGVzaXJlZFBsYWNlOyAvLyBUbyBwcmV2ZW50IHByZXZpb3VzbHkgY3JlYXRlZCB0aW1lcnMgZnJvbSB0cmlnZ2VyaW5nXG5cbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuICAgICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICAgIHZhciByZXNob3dEZWxheSA9IHRoaXMuc3RhdGUuc2hvdyA/IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWRlbGF5LXVwZGF0ZVwiKSB8fCB0aGlzLnByb3BzLmRlbGF5VXBkYXRlIDogMDtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgdmFyIHVwZGF0ZVN0YXRlID0gZnVuY3Rpb24gdXBkYXRlU3RhdGUoKSB7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoe1xuICAgICAgICAgIG9yaWdpblRvb2x0aXA6IG9yaWdpblRvb2x0aXAsXG4gICAgICAgICAgaXNNdWx0aWxpbmU6IGlzTXVsdGlsaW5lLFxuICAgICAgICAgIGRlc2lyZWRQbGFjZTogZGVzaXJlZFBsYWNlLFxuICAgICAgICAgIHBsYWNlOiBwbGFjZSxcbiAgICAgICAgICB0eXBlOiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIpIHx8IHNlbGYucHJvcHMudHlwZSB8fCBcImRhcmtcIixcbiAgICAgICAgICBjdXN0b21Db2xvcnM6IHtcbiAgICAgICAgICAgIHRleHQ6IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRleHQtY29sb3JcIikgfHwgc2VsZi5wcm9wcy50ZXh0Q29sb3IgfHwgbnVsbCxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJhY2tncm91bmQtY29sb3JcIikgfHwgc2VsZi5wcm9wcy5iYWNrZ3JvdW5kQ29sb3IgfHwgbnVsbCxcbiAgICAgICAgICAgIGJvcmRlcjogdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtYm9yZGVyLWNvbG9yXCIpIHx8IHNlbGYucHJvcHMuYm9yZGVyQ29sb3IgfHwgbnVsbCxcbiAgICAgICAgICAgIGFycm93OiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1hcnJvdy1jb2xvclwiKSB8fCBzZWxmLnByb3BzLmFycm93Q29sb3IgfHwgbnVsbFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWZmZWN0OiBlZmZlY3QsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgaHRtbDogKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWh0bWxcIikgPyB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1odG1sXCIpID09PSBcInRydWVcIiA6IHNlbGYucHJvcHMuaHRtbCkgfHwgZmFsc2UsXG4gICAgICAgICAgZGVsYXlTaG93OiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1kZWxheS1zaG93XCIpIHx8IHNlbGYucHJvcHMuZGVsYXlTaG93IHx8IDAsXG4gICAgICAgICAgZGVsYXlIaWRlOiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1kZWxheS1oaWRlXCIpIHx8IHNlbGYucHJvcHMuZGVsYXlIaWRlIHx8IDAsXG4gICAgICAgICAgZGVsYXlVcGRhdGU6IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWRlbGF5LXVwZGF0ZVwiKSB8fCBzZWxmLnByb3BzLmRlbGF5VXBkYXRlIHx8IDAsXG4gICAgICAgICAgYm9yZGVyOiAodGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtYm9yZGVyXCIpID8gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtYm9yZGVyXCIpID09PSBcInRydWVcIiA6IHNlbGYucHJvcHMuYm9yZGVyKSB8fCBmYWxzZSxcbiAgICAgICAgICBleHRyYUNsYXNzOiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jbGFzc1wiKSB8fCBzZWxmLnByb3BzW1wiY2xhc3NcIl0gfHwgc2VsZi5wcm9wcy5jbGFzc05hbWUgfHwgXCJcIixcbiAgICAgICAgICBkaXNhYmxlOiAodGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdGlwLWRpc2FibGVcIikgPyB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10aXAtZGlzYWJsZVwiKSA9PT0gXCJ0cnVlXCIgOiBzZWxmLnByb3BzLmRpc2FibGUpIHx8IGZhbHNlLFxuICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IHRhcmdldFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHNjcm9sbEhpZGUpIHtcbiAgICAgICAgICAgIHNlbGYuYWRkU2Nyb2xsTGlzdGVuZXIoc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnVwZGF0ZVRvb2x0aXAoZSk7XG5cbiAgICAgICAgICBpZiAoZ2V0Q29udGVudCAmJiBBcnJheS5pc0FycmF5KGdldENvbnRlbnQpKSB7XG4gICAgICAgICAgICBzZWxmLmludGVydmFsVXBkYXRlQ29udGVudCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbGYubW91bnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2dldENvbnRlbnQgPSBzZWxmLnByb3BzLmdldENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0VGlwQ29udGVudChvcmlnaW5Ub29sdGlwLCBcIlwiLCBfZ2V0Q29udGVudFswXSgpLCBpc011bHRpbGluZSk7XG4gICAgICAgICAgICAgICAgdmFyIGlzRW1wdHlUaXAgPSBzZWxmLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgaXNFbXB0eVRpcDogaXNFbXB0eVRpcFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZ2V0Q29udGVudFsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07IC8vIElmIHRoZXJlIGlzIG5vIGRlbGF5IGNhbGwgaW1tZWRpYXRlbHksIGRvbid0IGFsbG93IGV2ZW50cyB0byBnZXQgaW4gZmlyc3QuXG5cblxuICAgICAgaWYgKHJlc2hvd0RlbGF5KSB7XG4gICAgICAgIHRoaXMuZGVsYXlSZXNob3cgPSBzZXRUaW1lb3V0KHVwZGF0ZVN0YXRlLCByZXNob3dEZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVTdGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIG1vdXNlIGhvdmVyLCB1cGRhdGUgdG9vbCB0aXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVRvb2x0aXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlVG9vbHRpcChlKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBkZWxheVNob3cgPSBfdGhpcyRzdGF0ZS5kZWxheVNob3csXG4gICAgICAgICAgZGlzYWJsZSA9IF90aGlzJHN0YXRlLmRpc2FibGU7XG4gICAgICB2YXIgYWZ0ZXJTaG93ID0gdGhpcy5wcm9wcy5hZnRlclNob3c7XG4gICAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLmdldFRvb2x0aXBDb250ZW50KCk7XG4gICAgICB2YXIgZGVsYXlUaW1lID0gcGFyc2VJbnQoZGVsYXlTaG93LCAxMCk7XG4gICAgICB2YXIgZXZlbnRUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgfHwgZS50YXJnZXQ7IC8vIENoZWNrIGlmIHRoZSBtb3VzZSBpcyBhY3R1YWxseSBvdmVyIHRoZSB0b29sdGlwLCBpZiBzbyBkb24ndCBoaWRlIHRoZSB0b29sdGlwXG5cbiAgICAgIGlmICh0aGlzLm1vdXNlT25Ub29sVGlwKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBpZiB0aGUgdG9vbHRpcCBpcyBlbXB0eSwgZGlzYWJsZSB0aGUgdG9vbHRpcFxuXG5cbiAgICAgIGlmICh0aGlzLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpIHx8IGRpc2FibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdXBkYXRlU3RhdGUgPSBmdW5jdGlvbiB1cGRhdGVTdGF0ZSgpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGxhY2Vob2xkZXIpICYmIHBsYWNlaG9sZGVyLmxlbmd0aCA+IDAgfHwgcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICB2YXIgaXNJbnZpc2libGUgPSAhX3RoaXM1LnN0YXRlLnNob3c7XG5cbiAgICAgICAgICBfdGhpczUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudEV2ZW50OiBlLFxuICAgICAgICAgICAgY3VycmVudFRhcmdldDogZXZlbnRUYXJnZXQsXG4gICAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXM1LnVwZGF0ZVBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgIGlmIChpc0ludmlzaWJsZSAmJiBhZnRlclNob3cpIHtcbiAgICAgICAgICAgICAgYWZ0ZXJTaG93KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVNob3dMb29wKTtcblxuICAgICAgaWYgKGRlbGF5U2hvdykge1xuICAgICAgICB0aGlzLmRlbGF5U2hvd0xvb3AgPSBzZXRUaW1lb3V0KHVwZGF0ZVN0YXRlLCBkZWxheVRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLypcbiAgICAgKiBJZiB3ZSdyZSBtb3VzaW5nIG92ZXIgdGhlIHRvb2x0aXAgcmVtb3ZlIGl0IHdoZW4gd2UgbGVhdmUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsaXN0ZW5Gb3JUb29sdGlwRXhpdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5Gb3JUb29sdGlwRXhpdCgpIHtcbiAgICAgIHZhciBzaG93ID0gdGhpcy5zdGF0ZS5zaG93O1xuXG4gICAgICBpZiAoc2hvdyAmJiB0aGlzLnRvb2x0aXBSZWYpIHtcbiAgICAgICAgdGhpcy50b29sdGlwUmVmLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMuaGlkZVRvb2x0aXApO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVMaXN0ZW5lckZvclRvb2x0aXBFeGl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyRm9yVG9vbHRpcEV4aXQoKSB7XG4gICAgICB2YXIgc2hvdyA9IHRoaXMuc3RhdGUuc2hvdztcblxuICAgICAgaWYgKHNob3cgJiYgdGhpcy50b29sdGlwUmVmKSB7XG4gICAgICAgIHRoaXMudG9vbHRpcFJlZi5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLmhpZGVUb29sdGlwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiBtb3VzZSBsZWF2ZSwgaGlkZSB0b29sdGlwXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJoaWRlVG9vbHRpcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlVG9vbHRpcChlLCBoYXNUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge1xuICAgICAgICBpc1Njcm9sbDogZmFsc2VcbiAgICAgIH07XG4gICAgICB2YXIgZGlzYWJsZSA9IHRoaXMuc3RhdGUuZGlzYWJsZTtcbiAgICAgIHZhciBpc1Njcm9sbCA9IG9wdGlvbnMuaXNTY3JvbGw7XG4gICAgICB2YXIgZGVsYXlIaWRlID0gaXNTY3JvbGwgPyAwIDogdGhpcy5zdGF0ZS5kZWxheUhpZGU7XG4gICAgICB2YXIgYWZ0ZXJIaWRlID0gdGhpcy5wcm9wcy5hZnRlckhpZGU7XG4gICAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLmdldFRvb2x0aXBDb250ZW50KCk7XG4gICAgICBpZiAoIXRoaXMubW91bnQpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpIHx8IGRpc2FibGUpIHJldHVybjsgLy8gaWYgdGhlIHRvb2x0aXAgaXMgZW1wdHksIGRpc2FibGUgdGhlIHRvb2x0aXBcblxuICAgICAgaWYgKGhhc1RhcmdldCkge1xuICAgICAgICAvLyBEb24ndCB0cmlnZ2VyIG90aGVyIGVsZW1lbnRzIGJlbG9uZ3MgdG8gb3RoZXIgUmVhY3RUb29sdGlwXG4gICAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRoaXMuZ2V0VGFyZ2V0QXJyYXkodGhpcy5wcm9wcy5pZCk7XG4gICAgICAgIHZhciBpc015RWxlbWVudCA9IHRhcmdldEFycmF5LnNvbWUoZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgIHJldHVybiBlbGUgPT09IGUuY3VycmVudFRhcmdldDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXNNeUVsZW1lbnQgfHwgIXRoaXMuc3RhdGUuc2hvdykgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzZXRTdGF0ZSA9IGZ1bmN0aW9uIHJlc2V0U3RhdGUoKSB7XG4gICAgICAgIHZhciBpc1Zpc2libGUgPSBfdGhpczYuc3RhdGUuc2hvdzsgLy8gQ2hlY2sgaWYgdGhlIG1vdXNlIGlzIGFjdHVhbGx5IG92ZXIgdGhlIHRvb2x0aXAsIGlmIHNvIGRvbid0IGhpZGUgdGhlIHRvb2x0aXBcblxuICAgICAgICBpZiAoX3RoaXM2Lm1vdXNlT25Ub29sVGlwKCkpIHtcbiAgICAgICAgICBfdGhpczYubGlzdGVuRm9yVG9vbHRpcEV4aXQoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNi5yZW1vdmVMaXN0ZW5lckZvclRvb2x0aXBFeGl0KCk7XG5cbiAgICAgICAgX3RoaXM2LnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM2LnJlbW92ZVNjcm9sbExpc3RlbmVyKF90aGlzNi5zdGF0ZS5jdXJyZW50VGFyZ2V0KTtcblxuICAgICAgICAgIGlmIChpc1Zpc2libGUgJiYgYWZ0ZXJIaWRlKSB7XG4gICAgICAgICAgICBhZnRlckhpZGUoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuXG4gICAgICBpZiAoZGVsYXlIaWRlKSB7XG4gICAgICAgIHRoaXMuZGVsYXlIaWRlTG9vcCA9IHNldFRpbWVvdXQocmVzZXRTdGF0ZSwgcGFyc2VJbnQoZGVsYXlIaWRlLCAxMCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIHNjcm9sbCwgaGlkZSB0b29sdGlwXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJoaWRlVG9vbHRpcE9uU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVUb29sdGlwT25TY3JvbGwoZXZlbnQsIGhhc1RhcmdldCkge1xuICAgICAgdGhpcy5oaWRlVG9vbHRpcChldmVudCwgaGFzVGFyZ2V0LCB7XG4gICAgICAgIGlzU2Nyb2xsOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIHNjcm9sbCBldmVudCBsaXN0ZW5lciB3aGVuIHRvb2x0aXAgc2hvd1xuICAgICAqIGF1dG9tYXRpY2FsbHkgaGlkZSB0aGUgdG9vbHRpcCB3aGVuIHNjcm9sbGluZ1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkU2Nyb2xsTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU2Nyb2xsTGlzdGVuZXIoY3VycmVudFRhcmdldCkge1xuICAgICAgdmFyIGlzQ2FwdHVyZU1vZGUgPSB0aGlzLmlzQ2FwdHVyZShjdXJyZW50VGFyZ2V0KTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuaGlkZVRvb2x0aXBPblNjcm9sbCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZVNjcm9sbExpc3RlbmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVNjcm9sbExpc3RlbmVyKGN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHZhciBpc0NhcHR1cmVNb2RlID0gdGhpcy5pc0NhcHR1cmUoY3VycmVudFRhcmdldCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLmhpZGVUb29sdGlwT25TY3JvbGwsIGlzQ2FwdHVyZU1vZGUpO1xuICAgIH0gLy8gQ2FsY3VsYXRpb24gdGhlIHBvc2l0aW9uXG5cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVQb3NpdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBjdXJyZW50RXZlbnQgPSBfdGhpcyRzdGF0ZTIuY3VycmVudEV2ZW50LFxuICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBfdGhpcyRzdGF0ZTIuY3VycmVudFRhcmdldCxcbiAgICAgICAgICBwbGFjZSA9IF90aGlzJHN0YXRlMi5wbGFjZSxcbiAgICAgICAgICBkZXNpcmVkUGxhY2UgPSBfdGhpcyRzdGF0ZTIuZGVzaXJlZFBsYWNlLFxuICAgICAgICAgIGVmZmVjdCA9IF90aGlzJHN0YXRlMi5lZmZlY3QsXG4gICAgICAgICAgb2Zmc2V0ID0gX3RoaXMkc3RhdGUyLm9mZnNldDtcbiAgICAgIHZhciBub2RlID0gdGhpcy50b29sdGlwUmVmO1xuICAgICAgdmFyIHJlc3VsdCA9IGdldFBvc2l0aW9uKGN1cnJlbnRFdmVudCwgY3VycmVudFRhcmdldCwgbm9kZSwgcGxhY2UsIGRlc2lyZWRQbGFjZSwgZWZmZWN0LCBvZmZzZXQpO1xuXG4gICAgICBpZiAocmVzdWx0LnBvc2l0aW9uICYmIHRoaXMucHJvcHMub3ZlcnJpZGVQb3NpdGlvbikge1xuICAgICAgICByZXN1bHQucG9zaXRpb24gPSB0aGlzLnByb3BzLm92ZXJyaWRlUG9zaXRpb24ocmVzdWx0LnBvc2l0aW9uLCBjdXJyZW50RXZlbnQsIGN1cnJlbnRUYXJnZXQsIG5vZGUsIHBsYWNlLCBkZXNpcmVkUGxhY2UsIGVmZmVjdCwgb2Zmc2V0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5pc05ld1N0YXRlKSB7XG4gICAgICAgIC8vIFN3aXRjaCB0byByZXZlcnNlIHBsYWNlbWVudFxuICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZShyZXN1bHQubmV3U3RhdGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczcudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIFNldCB0b29sdGlwIHBvc2l0aW9uXG5cblxuICAgICAgbm9kZS5zdHlsZS5sZWZ0ID0gcmVzdWx0LnBvc2l0aW9uLmxlZnQgKyBcInB4XCI7XG4gICAgICBub2RlLnN0eWxlLnRvcCA9IHJlc3VsdC5wb3NpdGlvbi50b3AgKyBcInB4XCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENMZWFyIGFsbCBraW5kcyBvZiB0aW1lb3V0IG9mIGludGVydmFsXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclRpbWVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyVGltZXIoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVNob3dMb29wKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5SGlkZUxvb3ApO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlSZXNob3cpO1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsVXBkYXRlQ29udGVudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc0N1c3RvbUNvbG9yc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNDdXN0b21Db2xvcnMoKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgcmV0dXJuIEJvb2xlYW4oT2JqZWN0LmtleXModGhpcy5zdGF0ZS5jdXN0b21Db2xvcnMpLmZpbmQoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiBjb2xvciAhPT0gXCJib3JkZXJcIiAmJiBfdGhpczguc3RhdGUuY3VzdG9tQ29sb3JzW2NvbG9yXTtcbiAgICAgIH0pIHx8IHRoaXMuc3RhdGUuYm9yZGVyICYmIHRoaXMuc3RhdGUuY3VzdG9tQ29sb3JzW1wiYm9yZGVyXCJdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkc3RhdGUzID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBleHRyYUNsYXNzID0gX3RoaXMkc3RhdGUzLmV4dHJhQ2xhc3MsXG4gICAgICAgICAgaHRtbCA9IF90aGlzJHN0YXRlMy5odG1sLFxuICAgICAgICAgIGFyaWFQcm9wcyA9IF90aGlzJHN0YXRlMy5hcmlhUHJvcHMsXG4gICAgICAgICAgZGlzYWJsZSA9IF90aGlzJHN0YXRlMy5kaXNhYmxlO1xuICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldFRvb2x0aXBDb250ZW50KCk7XG4gICAgICB2YXIgaXNFbXB0eVRpcCA9IHRoaXMuaXNFbXB0eVRpcChjb250ZW50KTtcbiAgICAgIHZhciBzdHlsZSA9IGdlbmVyYXRlVG9vbHRpcFN0eWxlKHRoaXMuc3RhdGUudXVpZCwgdGhpcy5zdGF0ZS5jdXN0b21Db2xvcnMsIHRoaXMuc3RhdGUudHlwZSwgdGhpcy5zdGF0ZS5ib3JkZXIpO1xuICAgICAgdmFyIHRvb2x0aXBDbGFzcyA9IFwiX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcFwiICsgXCIgXCIuY29uY2F0KHRoaXMuc3RhdGUudXVpZCkgKyAodGhpcy5zdGF0ZS5zaG93ICYmICFkaXNhYmxlICYmICFpc0VtcHR5VGlwID8gXCIgc2hvd1wiIDogXCJcIikgKyAodGhpcy5zdGF0ZS5ib3JkZXIgPyBcIiBib3JkZXJcIiA6IFwiXCIpICsgXCIgcGxhY2UtXCIuY29uY2F0KHRoaXMuc3RhdGUucGxhY2UpICsgLy8gdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0XG4gICAgICBcIiB0eXBlLVwiLmNvbmNhdCh0aGlzLmhhc0N1c3RvbUNvbG9ycygpID8gXCJjdXN0b21cIiA6IHRoaXMuc3RhdGUudHlwZSkgKyAoIC8vIGRhcmssIHN1Y2Nlc3MsIHdhcm5pbmcsIGVycm9yLCBpbmZvLCBsaWdodCwgY3VzdG9tXG4gICAgICB0aGlzLnByb3BzLmRlbGF5VXBkYXRlID8gXCIgYWxsb3dfaG92ZXJcIiA6IFwiXCIpICsgKHRoaXMucHJvcHMuY2xpY2thYmxlID8gXCIgYWxsb3dfY2xpY2tcIiA6IFwiXCIpO1xuICAgICAgdmFyIFdyYXBwZXIgPSB0aGlzLnByb3BzLndyYXBwZXI7XG5cbiAgICAgIGlmIChSZWFjdFRvb2x0aXAuc3VwcG9ydGVkV3JhcHBlcnMuaW5kZXhPZihXcmFwcGVyKSA8IDApIHtcbiAgICAgICAgV3JhcHBlciA9IFJlYWN0VG9vbHRpcC5kZWZhdWx0UHJvcHMud3JhcHBlcjtcbiAgICAgIH1cblxuICAgICAgdmFyIHdyYXBwZXJDbGFzc05hbWUgPSBbdG9vbHRpcENsYXNzLCBleHRyYUNsYXNzXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG5cbiAgICAgIGlmIChodG1sKSB7XG4gICAgICAgIHZhciBodG1sQ29udGVudCA9IFwiXCIuY29uY2F0KGNvbnRlbnQsIFwiXFxuPHN0eWxlPlwiKS5jb25jYXQoc3R5bGUsIFwiPC9zdHlsZT5cIik7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZXIsIF9leHRlbmRzKHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHdyYXBwZXJDbGFzc05hbWUpLFxuICAgICAgICAgIGlkOiB0aGlzLnByb3BzLmlkLFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczkudG9vbHRpcFJlZiA9IF9yZWY7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBhcmlhUHJvcHMsIHtcbiAgICAgICAgICBcImRhdGEtaWRcIjogXCJ0b29sdGlwXCIsXG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICAgIF9faHRtbDogaHRtbENvbnRlbnRcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZXIsIF9leHRlbmRzKHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHdyYXBwZXJDbGFzc05hbWUpLFxuICAgICAgICAgIGlkOiB0aGlzLnByb3BzLmlkXG4gICAgICAgIH0sIGFyaWFQcm9wcywge1xuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYyKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM5LnRvb2x0aXBSZWYgPSBfcmVmMjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGF0YS1pZFwiOiBcInRvb2x0aXBcIlxuICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInN0eWxlXCIsIHtcbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgICAgX19odG1sOiBzdHlsZVxuICAgICAgICAgIH1cbiAgICAgICAgfSksIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIHZhciBhcmlhUHJvcHMgPSBwcmV2U3RhdGUuYXJpYVByb3BzO1xuICAgICAgdmFyIG5ld0FyaWFQcm9wcyA9IHBhcnNlQXJpYShuZXh0UHJvcHMpO1xuICAgICAgdmFyIGlzQ2hhbmdlZCA9IE9iamVjdC5rZXlzKG5ld0FyaWFQcm9wcykuc29tZShmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIG5ld0FyaWFQcm9wc1twcm9wc10gIT09IGFyaWFQcm9wc1twcm9wc107XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFpc0NoYW5nZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgcHJldlN0YXRlLCB7XG4gICAgICAgIGFyaWFQcm9wczogbmV3QXJpYVByb3BzXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVhY3RUb29sdGlwO1xufShSZWFjdC5Db21wb25lbnQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzMiwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBpbnNlY3VyZTogdHJ1ZSxcbiAgcmVzaXplSGlkZTogdHJ1ZSxcbiAgd3JhcHBlcjogXCJkaXZcIixcbiAgY2xpY2thYmxlOiBmYWxzZVxufSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MyLCBcInN1cHBvcnRlZFdyYXBwZXJzXCIsIFtcImRpdlwiLCBcInNwYW5cIl0pLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzMiwgXCJkaXNwbGF5TmFtZVwiLCBcIlJlYWN0VG9vbHRpcFwiKSwgX3RlbXApKSB8fCBfY2xhc3MpIHx8IF9jbGFzcykgfHwgX2NsYXNzKSB8fCBfY2xhc3MpIHx8IF9jbGFzcykgfHwgX2NsYXNzKSB8fCBfY2xhc3M7XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0VG9vbHRpcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==
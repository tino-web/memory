/*! For license information please see main.0214230d.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,function(e,t,n){"use strict";t.a=function(e,t){if(!e)throw new Error("Invariant failed")}},function(e,t,n){var r,o,i;o=[t],void 0===(i="function"===typeof(r=function(e){"use strict";e.__esModule=!0;var t="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n="function"===typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,r={isValidElement:function(e){return"object"===("undefined"===typeof e?"undefined":t(e))&&null!==e&&e.$$typeof===n}},o={prop:"prop",context:"context",childContext:"child context"},i=function(e){return function(){return e}},a="function"===typeof Symbol&&Symbol.iterator,c={array:l("array"),bool:l("boolean"),func:l("function"),number:l("number"),object:l("object"),string:l("string"),symbol:l("symbol"),any:s(i(null)),arrayOf:function(e){return s((function(t,n,r,i,a){var c=t[n];if(!Array.isArray(c)){var s=o[i],l=f(c);return new Error("Invalid "+s+" `"+a+"` of type `"+l+"` supplied to `"+r+"`, expected an array.")}for(var u=0;u<c.length;u++){var d=e(c,u,r,i,a+"["+u+"]");if(d instanceof Error)return d}return null}))},element:s((function(e,t,n,i,a){return r.isValidElement(e[t])?null:new Error("Invalid "+o[i]+" `"+a+"` supplied to `"+n+"`, expected a single ReactElement.")})),instanceOf:function(e){return s((function(t,n,r,i,a){if(!(t[n]instanceof e)){var c=o[i],s=e.name||"<<anonymous>>",l=(u=t[n]).constructor&&u.constructor.name?u.constructor.name:"<<anonymous>>";return new Error("Invalid "+c+" `"+a+"` of type `"+l+"` supplied to `"+r+"`, expected instance of `"+s+"`.")}var u;return null}))},node:s((function(e,t,n,r,i){return u(e[t])?null:new Error("Invalid "+o[r]+" `"+i+"` supplied to `"+n+"`, expected a ReactNode.")})),objectOf:function(e){return s((function(t,n,r,i,a){var c=t[n],s=f(c);if("object"!==s)return new Error("Invalid "+o[i]+" `"+a+"` of type `"+s+"` supplied to `"+r+"`, expected an object.");for(var l in c)if(c.hasOwnProperty(l)){var u=e(c,l,r,i,a+"."+l);if(u instanceof Error)return u}return null}))},oneOf:function(e){return Array.isArray(e)?s((function(t,n,r,i,a){for(var c=t[n],s=0;s<e.length;s++)if(c===e[s])return null;var l=o[i],u=JSON.stringify(e);return new Error("Invalid "+l+" `"+a+"` of value `"+c+"` supplied to `"+r+"`, expected one of "+u+".")})):s((function(){return new Error("Invalid argument supplied to oneOf, expected an instance of array.")}))},oneOfType:function(e){return Array.isArray(e)?s((function(t,n,r,i,a){for(var c=0;c<e.length;c++)if(null==(0,e[c])(t,n,r,i,a))return null;return new Error("Invalid "+o[i]+" `"+a+"` supplied to `"+r+"`.")})):s((function(){return new Error("Invalid argument supplied to oneOfType, expected an instance of array.")}))},shape:function(e){return s((function(t,n,r,i,a){var c=t[n],s=f(c);if("object"!==s)return new Error("Invalid "+o[i]+" `"+a+"` of type `"+s+"` supplied to `"+r+"`, expected `object`.");for(var l in e){var u=e[l];if(u){var d=u(c,l,r,i,a+"."+l);if(d)return d}}return null}))}};function s(e){function t(t,n,r,i,a,c){return i=i||"<<anonymous>>",c=c||r,null==n[r]?t?new Error("Required "+o[a]+" `"+c+"` was not specified in `"+i+"`."):null:e(n,r,i,a,c)}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function l(e){return s((function(t,n,r,i,a){var c=t[n];if(f(c)!==e){var s=o[i],l=function(e){var t=f(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}(c);return new Error("Invalid "+s+" `"+a+"` of type `"+l+"` supplied to `"+r+"`, expected `"+e+"`.")}return null}))}function u(e){switch("undefined"===typeof e?"undefined":t(e)){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(u);if(null===e||r.isValidElement(e))return!0;var n=function(e){var t=e&&(a&&e[a]||e["@@iterator"]);if("function"===typeof t)return t}(e);if(!n)return!1;var o,i=n.call(e);if(n!==e.entries){for(;!(o=i.next()).done;)if(!u(o.value))return!1}else for(;!(o=i.next()).done;){var c=o.value;if(c&&!u(c[1]))return!1}return!0;default:return!1}}function f(e){var n="undefined"===typeof e?"undefined":t(e);return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||"Symbol"===t["@@toStringTag"]||"function"===typeof Symbol&&t instanceof Symbol}(n,e)?"symbol":n}e.default=c})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";n.d(t,"a",(function(){return j})),n.d(t,"b",(function(){return I})),n.d(t,"d",(function(){return T})),n.d(t,"c",(function(){return v})),n.d(t,"f",(function(){return m})),n.d(t,"e",(function(){return h}));var r=n(5);function o(e){return"/"===e.charAt(0)}function i(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var a=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],c=e&&o(e),s=t&&o(t),l=c||s;if(e&&o(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var u=a[a.length-1];n="."===u||".."===u||""===u}else n=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?i(a,d):".."===p?(i(a,d),f++):f&&(i(a,d),f--)}if(!l)for(;f--;f)a.unshift("..");!l||""===a[0]||a[0]&&o(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};function c(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var s=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"===typeof t||"object"===typeof n){var r=c(t),o=c(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},l=n(7);function u(e){return"/"===e.charAt(0)?e:"/"+e}function f(e){return"/"===e.charAt(0)?e.substr(1):e}function d(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function p(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function h(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function v(e,t,n,o){var i;"string"===typeof e?(i=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=Object(r.a)({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(c){throw c instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):c}return n&&(i.key=n),o?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=a(i.pathname,o.pathname)):i.pathname=o.pathname:i.pathname||(i.pathname="/"),i}function m(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&s(e.state,t.state)}function b(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"===typeof e?e(t,n):e;"string"===typeof i?"function"===typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var g=!("undefined"===typeof window||!window.document||!window.document.createElement);function y(e,t){t(window.confirm(e))}function w(){try{return window.history.state||{}}catch(e){return{}}}function j(e){void 0===e&&(e={}),g||Object(l.a)(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,c=a.forceRefresh,s=void 0!==c&&c,f=a.getUserConfirmation,m=void 0===f?y:f,j=a.keyLength,O=void 0===j?6:j,N=e.basename?p(u(e.basename)):"";function S(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return N&&(i=d(i,N)),v(i,r,n)}function x(){return Math.random().toString(36).substr(2,O)}var I=b();function E(e){Object(r.a)(F,e),F.length=n.length,I.notifyListeners(F.location,F.action)}function T(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||P(S(e.state))}function _(){P(S(w()))}var C=!1;function P(e){if(C)C=!1,E();else{I.confirmTransitionTo(e,"POP",m,(function(t){t?E({action:"POP",location:e}):function(e){var t=F.location,n=R.indexOf(t.key);-1===n&&(n=0);var r=R.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(C=!0,A(o))}(e)}))}}var k=S(w()),R=[k.key];function L(e){return N+h(e)}function A(e){n.go(e)}var M=0;function B(e){1===(M+=e)&&1===e?(window.addEventListener("popstate",T),i&&window.addEventListener("hashchange",_)):0===M&&(window.removeEventListener("popstate",T),i&&window.removeEventListener("hashchange",_))}var U=!1;var F={length:n.length,action:"POP",location:k,createHref:L,push:function(e,t){var r=v(e,t,x(),F.location);I.confirmTransitionTo(r,"PUSH",m,(function(e){if(e){var t=L(r),i=r.key,a=r.state;if(o)if(n.pushState({key:i,state:a},null,t),s)window.location.href=t;else{var c=R.indexOf(F.location.key),l=R.slice(0,c+1);l.push(r.key),R=l,E({action:"PUSH",location:r})}else window.location.href=t}}))},replace:function(e,t){var r=v(e,t,x(),F.location);I.confirmTransitionTo(r,"REPLACE",m,(function(e){if(e){var t=L(r),i=r.key,a=r.state;if(o)if(n.replaceState({key:i,state:a},null,t),s)window.location.replace(t);else{var c=R.indexOf(F.location.key);-1!==c&&(R[c]=r.key),E({action:"REPLACE",location:r})}else window.location.replace(t)}}))},go:A,goBack:function(){A(-1)},goForward:function(){A(1)},block:function(e){void 0===e&&(e=!1);var t=I.setPrompt(e);return U||(B(1),U=!0),function(){return U&&(U=!1,B(-1)),t()}},listen:function(e){var t=I.appendListener(e);return B(1),function(){B(-1),t()}}};return F}var O={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+f(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:f,decodePath:u},slash:{encodePath:u,decodePath:u}};function N(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function S(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function x(e){window.location.replace(N(window.location.href)+"#"+e)}function I(e){void 0===e&&(e={}),g||Object(l.a)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),o=n.getUserConfirmation,i=void 0===o?y:o,a=n.hashType,c=void 0===a?"slash":a,s=e.basename?p(u(e.basename)):"",f=O[c],m=f.encodePath,w=f.decodePath;function j(){var e=w(S());return s&&(e=d(e,s)),v(e)}var I=b();function E(e){Object(r.a)(F,e),F.length=t.length,I.notifyListeners(F.location,F.action)}var T=!1,_=null;function C(){var e,t,n=S(),r=m(n);if(n!==r)x(r);else{var o=j(),a=F.location;if(!T&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(_===h(o))return;_=null,function(e){if(T)T=!1,E();else{I.confirmTransitionTo(e,"POP",i,(function(t){t?E({action:"POP",location:e}):function(e){var t=F.location,n=L.lastIndexOf(h(t));-1===n&&(n=0);var r=L.lastIndexOf(h(e));-1===r&&(r=0);var o=n-r;o&&(T=!0,A(o))}(e)}))}}(o)}}var P=S(),k=m(P);P!==k&&x(k);var R=j(),L=[h(R)];function A(e){t.go(e)}var M=0;function B(e){1===(M+=e)&&1===e?window.addEventListener("hashchange",C):0===M&&window.removeEventListener("hashchange",C)}var U=!1;var F={length:t.length,action:"POP",location:R,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=N(window.location.href)),n+"#"+m(s+h(e))},push:function(e,t){var n=v(e,void 0,void 0,F.location);I.confirmTransitionTo(n,"PUSH",i,(function(e){if(e){var t=h(n),r=m(s+t);if(S()!==r){_=t,function(e){window.location.hash=e}(r);var o=L.lastIndexOf(h(F.location)),i=L.slice(0,o+1);i.push(t),L=i,E({action:"PUSH",location:n})}else E()}}))},replace:function(e,t){var n=v(e,void 0,void 0,F.location);I.confirmTransitionTo(n,"REPLACE",i,(function(e){if(e){var t=h(n),r=m(s+t);S()!==r&&(_=t,x(r));var o=L.indexOf(h(F.location));-1!==o&&(L[o]=t),E({action:"REPLACE",location:n})}}))},go:A,goBack:function(){A(-1)},goForward:function(){A(1)},block:function(e){void 0===e&&(e=!1);var t=I.setPrompt(e);return U||(B(1),U=!0),function(){return U&&(U=!1,B(-1)),t()}},listen:function(e){var t=I.appendListener(e);return B(1),function(){B(-1),t()}}};return F}function E(e,t,n){return Math.min(Math.max(e,t),n)}function T(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,o=t.initialEntries,i=void 0===o?["/"]:o,a=t.initialIndex,c=void 0===a?0:a,s=t.keyLength,l=void 0===s?6:s,u=b();function f(e){Object(r.a)(w,e),w.length=w.entries.length,u.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,l)}var p=E(c,0,i.length-1),m=i.map((function(e){return v(e,void 0,"string"===typeof e?d():e.key||d())})),g=h;function y(e){var t=E(w.index+e,0,w.entries.length-1),r=w.entries[t];u.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:m.length,action:"POP",location:m[p],index:p,entries:m,createHref:g,push:function(e,t){var r=v(e,t,d(),w.location);u.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=v(e,t,d(),w.location);u.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:y,goBack:function(){y(-1)},goForward:function(){y(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),u.setPrompt(e)},listen:function(e){return u.appendListener(e)}};return w}},,,,,,function(e,t,n){var r={"./1_1.jpg":46,"./1_10.jpg":47,"./1_2.jpg":48,"./1_3.jpg":49,"./1_4.jpg":50,"./1_5.jpg":51,"./1_6.jpg":52,"./1_7.jpg":53,"./1_8.jpg":54,"./1_9.jpg":55,"./2_1.jpg":56,"./2_10.jpg":57,"./2_2.jpg":58,"./2_3.jpg":59,"./2_4.jpg":60,"./2_5.jpg":61,"./2_6.jpg":62,"./2_7.jpg":63,"./2_8.jpg":64,"./2_9.jpg":65,"./3_1.jpg":66,"./3_10.jpg":67,"./3_2.jpg":68,"./3_3.jpg":69,"./3_4.jpg":70,"./3_5.jpg":71,"./3_6.jpg":72,"./3_7.jpg":73,"./3_8.jpg":74,"./3_9.jpg":75};function o(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=15},function(e,t,n){"use strict";(function(e){var r=n(1),o=n.n(r),i=n(6),a=n(2),c=n.n(a),s="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof window?window:"undefined"!==typeof e?e:{};function l(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var u=o.a.createContext||function(e,t){var n,o,a,u="__create-react-context-"+((s[a="__global_unique_id__"]=(s[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=l(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[u]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i===1/a:i!==i&&a!==a)?n=0:(n="function"===typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[u]=c.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!==((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=void 0===t||null===t?1073741823:t},r.componentDidMount=function(){this.context[u]&&this.context[u].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?1073741823:e},r.componentWillUnmount=function(){this.context[u]&&this.context[u].off(this.onUpdate)},r.getValue=function(){return this.context[u]?this.context[u].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[u]=c.a.object,o),{Provider:f,Consumer:d}};t.a=u}).call(this,n(43))},,,function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(o){return!1}}()?Object.assign:function(e,t){for(var n,c,s=a(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))o.call(n,u)&&(s[u]=n[u]);if(r){c=r(n);for(var f=0;f<c.length;f++)i.call(n,c[f])&&(s[c[f]]=n[c[f]])}}return s}},,,,function(e,t,n){"use strict";n.r(t),t.default=n.p+"596ec2b818bc0f0a9b90efacec090b9f.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"d73019122e939b277d6edd544ceefa0e.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"bacb154f9c0c389bd3fdfbf188c09a7a.png"},,function(e,t,n){"use strict";var r=n(22),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function s(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var l=Object.defineProperty,u=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!==typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=u(n);f&&(a=a.concat(f(n)));for(var c=s(t),v=s(n),m=0;m<a.length;++m){var b=a[m];if(!i[b]&&(!r||!r[b])&&(!v||!v[b])&&(!c||!c[b])){var g=d(n,b);try{l(t,b,g)}catch(y){}}}}return t}},,function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){e.exports=n(1)},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return f}));var r=n(0),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n(2);var f=function(e){function t(e){var n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this,r=c(t).call(this,e),n=!r||"object"!==i(r)&&"function"!=typeof r?s(this):r,u(s(n),"toggle",(function(e){n.state.checked?n.off():n.on()})),u(s(n),"off",(function(){n.state.disabled||(n.setState({checked:!1}),n.props.onChange&&n.props.onChange(!1))})),u(s(n),"on",(function(){n.state.disabled||(n.setState({checked:!0}),n.props.onChange&&n.props.onChange(!0))})),u(s(n),"enable",(function(){n.setState({disabled:!1})})),u(s(n),"disable",(function(){n.setState({disabled:!0})})),u(s(n),"render",(function(){var e={};n.state.width&&(e.width=n.state.width+"px"),n.state.height&&(e.height=n.state.height+"px");var t={};return n.state.height&&(t.lineHeight="calc("+n.state.height+"px * 0.8)"),o.a.createElement("div",{className:"switch btn "+(n.state.checked?"on btn-"+n.state.onstyle:"off btn-"+n.state.offstyle)+(n.state.size?" btn-"+n.state.size:"")+(n.state.style?" "+n.state.style:""),style:e,onClick:n.toggle},o.a.createElement("div",{className:"switch-group"},o.a.createElement("span",{className:"switch-on btn btn-"+n.state.onstyle+(n.state.size?" btn-"+n.state.size:""),style:t},n.state.onlabel),o.a.createElement("span",{className:"switch-off btn btn-"+n.state.offstyle+(n.state.size?" btn-"+n.state.size:""),style:t},n.state.offlabel),o.a.createElement("span",{className:"switch-handle btn btn-light"+(n.state.size?"btn-"+n.state.size:"")})))})),n.state={checked:"boolean"==typeof n.props.checked&&n.props.checked,disabled:"boolean"==typeof n.props.disabled&&n.props.disabled,onlabel:n.props.onlabel||"On",offlabel:n.props.offlabel||"Off",onstyle:n.props.onstyle||"primary",offstyle:n.props.offstyle||"light",size:n.props.size||"",style:n.props.style||"",width:n.props.width||null,height:n.props.height||null},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,e),n=t,(r=[{key:"componentDidUpdate",value:function(e,t){var n=this.props.checked;"boolean"==typeof n&&n!==t.checked&&this.setState({checked:n})}}])&&a(n.prototype,r),t}(o.a.Component)},function(e,t,n){var r=n(3);"string"==typeof r&&(r=[[e.i,r,""]]);n(5)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,'/*\\\n|*|  :: Bootstrap Switch Button ::\n|*|\n|*|  Bootstrap Switch Button (React)\n|*|  https://github.com/gitbrent/bootstrap-switch-button-react\n|*|\n|*|  This library is released under the MIT Public License (MIT)\n|*|\n|*|  Bootstrap Switch Button (C) 2019-present Brent Ely (https://github.com/gitbrent)\n|*|\n|*|  Permission is hereby granted, free of charge, to any person obtaining a copy\n|*|  of this software and associated documentation files (the "Software"), to deal\n|*|  in the Software without restriction, including without limitation the rights\n|*|  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n|*|  copies of the Software, and to permit persons to whom the Software is\n|*|  furnished to do so, subject to the following conditions:\n|*|\n|*|  The above copyright notice and this permission notice shall be included in all\n|*|  copies or substantial portions of the Software.\n|*|\n|*|  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n|*|  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n|*|  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n|*|  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n|*|  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n|*|  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n|*|  SOFTWARE.\n\\*/\n\n.btn-group-xs > .btn, .btn-xs {\n\tpadding: .35rem .4rem .25rem .4rem;\n\tfont-size: .875rem;\n\tline-height: .5;\n\tborder-radius: .2rem;\n}\n\n.switch {\n\tposition: relative;\n\toverflow: hidden;\n}\n.switch.btn.btn-light, .switch.btn.btn-outline-light {\n\tborder-color: rgba(0, 0, 0, .15); /* Add a border so switch is delineated */\n}\n.switch input[type="checkbox"] {\n\tdisplay: none;\n}\n.switch-group {\n\tposition: absolute;\n\twidth: 200%;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\ttransition: left 0.35s;\n\t-webkit-transition: left 0.35s;\n\t-moz-user-select: none;\n\t-webkit-user-select: none;\n}\n.switch.off .switch-group {\n\tleft: -100%;\n}\n.switch-on {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 50%;\n\tmargin: 0;\n\tborder: 0;\n\tborder-radius: 0;\n}\n.switch-off {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 50%;\n\tright: 0;\n\tmargin: 0;\n\tborder: 0;\n\tborder-radius: 0;\n\tbox-shadow: none;\n}\n.switch-handle {\n\tposition: relative;\n\tmargin: 0 auto;\n\tpadding-top: 0px;\n\tpadding-bottom: 0px;\n\theight: 100%;\n\twidth: 0px;\n\tborder-width: 0 1px;\n\tbackground-color: #fff;\n}\n\n.switch.btn-outline-primary .switch-handle {\n\tbackground-color: var(--primary);\n\tborder-color: var(--primary);\n}\n.switch.btn-outline-secondary .switch-handle {\n\tbackground-color: var(--secondary);\n\tborder-color: var(--secondary);\n}\n.switch.btn-outline-success .switch-handle {\n\tbackground-color: var(--success);\n\tborder-color: var(--success);\n}\n.switch.btn-outline-danger .switch-handle {\n\tbackground-color: var(--danger);\n\tborder-color: var(--danger);\n}\n.switch.btn-outline-warning .switch-handle {\n\tbackground-color: var(--warning);\n\tborder-color: var(--warning);\n}\n.switch.btn-outline-info .switch-handle {\n\tbackground-color: var(--info);\n\tborder-color: var(--info);\n}\n.switch.btn-outline-light .switch-handle {\n\tbackground-color: var(--light);\n\tborder-color: var(--light);\n}\n.switch.btn-outline-dark .switch-handle {\n\tbackground-color: var(--dark);\n\tborder-color: var(--dark);\n}\n.switch[class*="btn-outline"]:hover .switch-handle {\n\tbackground-color: var(--light);\n\topacity: 0.5;\n}\n\n/* NOTE: Must come first, so classes below override as needed */\n/* bootstrap-4.x .form-control {height} values used as `min-height` to mirror output sizes */\n\n.switch.btn { min-width: 3.7rem; min-height: calc(1.5em + .75rem + 2px); }\n.switch-on.btn { padding-right: 1.5rem; }\n.switch-off.btn { padding-left: 1.5rem; }\n\n.switch.btn-lg { min-width: 5rem; line-height: 1.5; min-height: calc(1.5em + 1rem + 2px); }\n.switch-on.btn-lg { padding-right: 2rem; }\n.switch-off.btn-lg { padding-left: 2rem; }\n.switch-handle.btn-lg { width: 2.5rem; }\n\n.switch.btn-sm { min-width: 3.25rem; min-height: calc(1.5em + .5rem + 2px); }\n.switch-on.btn-sm { padding-right: 1rem; }\n.switch-off.btn-sm { padding-left: 1rem; }\n\n/* `xs` (bootstrap-3.3 - .btn - h:22px) */\n.switch.btn-xs { min-width: 3.125rem; min-height: 1.375rem; }\n.switch-on.btn-xs { padding-right: .8rem; }\n.switch-off.btn-xs { padding-left: .8rem; }\n',""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,r=e[1]||"",o=e[3];if(!o)return r;if(t&&"function"==typeof btoa){var i=(n=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),a=o.sources.map((function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"}));return[r].concat(a).concat([i]).join("\n")}return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),c=function(e,t){return t?t.querySelector(e):document.querySelector(e)},s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=c.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,u=0,f=[],d=n(6);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],t))}else{var c=[];for(a=0;a<r.parts.length;a++)c.push(y(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:c}}}}function h(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(c):n.push(r[a]={id:a,parts:[c]})}return n}function v(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,n);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function b(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=n.nc;r&&(e.attrs.nonce=r)}return g(t,e.attrs),v(e,t),t}function g(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=u++;n=l||(l=b(t)),r=O.bind(null,n,a,!1),o=O.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),v(e,t),t}(t),r=S.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(t),r=N.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(c=i[a.id]).refs--,r.push(c)}for(e&&p(h(e,t),t),o=0;o<r.length;o++){var c;if(0===(c=r[o]).refs){for(var s=0;s<c.parts.length;s++)c.parts[s]();delete i[c.id]}}}};var w,j=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function O(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=j(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function N(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function S(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=d(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),c=e.href;e.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}}])},,,,,,,,,,,,,,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}e.exports=n},,,function(e,t,n){"use strict";n.r(t),t.default=n.p+"e7178ce44726949068841293498e51da.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"607edc1593e51ff641eb2025bb724f78.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"146e7470335c465ad8bb48b69b68d930.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"81ee0c19d5b03b9039c475b820a862e1.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"08b97f3809a2e9a32972a1172dedf386.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"2d8fbe2361d6e5cd5d195a89276f0edd.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"09041ab098fa96a993a935fd30213ec9.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"a8315f48d0385c4da8ad3b6ab1f22a98.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"58a6c4920edd96654c88a991dc63c6a6.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"96ba384df62f38ee183a6f3e06ea1635.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"173cc74a5b1d5e5940d303f15fbd295a.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"376dbcb473dae0730b1f469f86bd4739.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"c22eac440cc69b1722fccf2f2e0b514a.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"52965ecee2e1e15e9c31d595a9c13b7a.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"f21b8b672fc3dc57c16802f691f02e73.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"facaf01cb47ffed915dd44101d7a41d3.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"060b441cb110068c45448d581eee0090.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"8ca7613bfc097bfaca3424e66c754883.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"98425d98bf7e428b3360ba6b32570226.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"9bbe1aebf5190d9b54a18c8bfd1745be.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"0c475fd0a09abe716ed89d4497d80f55.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"f3d92d7f951ad788e1a5021a5d4c2388.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"86ff2b34e9e6083865dda20e04326aff.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"0327265c69fbca1e767b55344d4b45fc.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"eed7517267f0543ce45ff521c0f7a8c9.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"ec5f5a662d478d52cae6c39fd91e06a9.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"fcb34626927093cae0fee9a828a16bff.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"5aa767a15b040333ae3feb69aa47870d.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"6ea71718956797df4fd300b2e26cb9a1.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"e9b0fa904aface4e54510c8a53b8c020.jpg"},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"===typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(I){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o=t&&t.prototype instanceof f?t:f,i=Object.create(o.prototype),a=new N(r||[]);return i._invoke=function(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return x()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=w(a,n);if(c){if(c===u)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=l(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===u)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}(e,n,a),i}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(I){return{type:"throw",arg:I}}}e.wrap=s;var u={};function f(){}function d(){}function p(){}var h={};h[o]=function(){return this};var v=Object.getPrototypeOf,m=v&&v(v(S([])));m&&m!==t&&n.call(m,o)&&(h=m);var b=p.prototype=f.prototype=Object.create(h);function g(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function y(e,t){var r;this._invoke=function(o,i){function a(){return new t((function(r,a){!function r(o,i,a,c){var s=l(e[o],e,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"===typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,a,c)}),(function(e){r("throw",e,a,c)})):t.resolve(f).then((function(e){u.value=e,a(u)}),(function(e){return r("throw",e,a,c)}))}c(s.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return u;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=l(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,u;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,u):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,u)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function S(e){if(e){var t=e[o];if(t)return t.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:x}}function x(){return{value:void 0,done:!0}}return d.prototype=b.constructor=p,p.constructor=d,d.displayName=c(p,a,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"===typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,c(e,a,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},g(y.prototype),y.prototype[i]=function(){return this},e.AsyncIterator=y,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new y(s(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},g(b),c(b,a,"Generator"),b[o]=function(){return this},b.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=S,N.prototype={constructor:N,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),u},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),u}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),u}},e}(e.exports);try{regeneratorRuntime=r}catch(o){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){},function(e,t,n){var r={"./setup_card1.png":23,"./setup_card2.png":24,"./setup_card3.png":25};function o(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=78},function(e,t,n){var r={"./card1.png":80,"./card2.png":81,"./card3.png":82,"./setup_card1.png":23,"./setup_card2.png":24,"./setup_card3.png":25};function o(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=79},function(e,t,n){"use strict";n.r(t),t.default=n.p+"405a5acef955c2cab8282ce788fa2074.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"3158b98cbd4661c2891d7860b9043810.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"035e35590714660dab090d7be30b62bb.png"},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(1),a=n.n(i),c=n(26),s=n.n(c),l=n(4),u=n(6),f=n(9),d=(n(2),n(5)),p=n(10),h=n(7);a.a.Component;var v=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(f.b)(t.props),t}return Object(u.a)(t,e),t.prototype.render=function(){return a.a.createElement(l.c,{history:this.history,children:this.props.children})},t}(a.a.Component);var m=function(e,t){return"function"===typeof e?e(t):e},b=function(e,t){return"string"===typeof e?Object(f.c)(e,null,null,t):e},g=function(e){return e},y=a.a.forwardRef;"undefined"===typeof y&&(y=g);var w=y((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=Object(p.a)(e,["innerRef","navigate","onClick"]),c=i.target,s=Object(d.a)({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||c&&"_self"!==c||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return s.ref=g!==y&&t||n,a.a.createElement("a",s)}));var j=y((function(e,t){var n=e.component,r=void 0===n?w:n,o=e.replace,i=e.to,c=e.innerRef,s=Object(p.a)(e,["component","replace","to","innerRef"]);return a.a.createElement(l.e.Consumer,null,(function(e){e||Object(h.a)(!1);var n=e.history,l=b(m(i,e.location),e.location),u=l?n.createHref(l):"",f=Object(d.a)({},s,{href:u,navigate:function(){var t=m(i,e.location);(o?n.replace:n.push)(t)}});return g!==y?f.ref=t||c:f.innerRef=c,a.a.createElement(r,f)}))})),O=function(e){return e},N=a.a.forwardRef;"undefined"===typeof N&&(N=O);var S=N((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,i=void 0===o?"active":o,c=e.activeStyle,s=e.className,u=e.exact,f=e.isActive,v=e.location,g=e.sensitive,y=e.strict,w=e.style,S=e.to,x=e.innerRef,I=Object(p.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return a.a.createElement(l.e.Consumer,null,(function(e){e||Object(h.a)(!1);var n=v||e.location,o=b(m(S,n),n),p=o.pathname,E=p&&p.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),T=E?Object(l.f)(n.pathname,{path:E,exact:u,sensitive:g,strict:y}):null,_=!!(f?f(T,n):T),C=_?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(s,i):s,P=_?Object(d.a)({},w,{},c):w,k=Object(d.a)({"aria-current":_&&r||null,className:C,style:P,to:o},I);return O!==N?k.ref=t||x:k.innerRef=x,a.a.createElement(j,k)}))})),x=n(12),I=n.n(x),E=n(3),T=n.n(E),_=(n(8),{1:{name:"",matched:0,moves:0},2:{name:"",matched:0,moves:0}});var C=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;if(e%t!==0)return[];for(var n=[],r=1;r<=e/t;r+=1)n.push(r);for(var o=(n=Array.from({length:t},(function(){return n})).flat()).length-1;o>0;o-=1){var i=Math.floor(Math.random()*(o+1)),a=[n[i],n[o]];n[o]=a[0],n[i]=a[1]}var c=n.map((function(e,t){return{position:t+1,tileId:e,isSelected:!1,isMatched:!1}}));return c};function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){I()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var R=a.a.createContext();function L(e){var t=e.children,n=Object(i.useState)(10),r=T()(n,2),a=r[0],c=r[1],s=Object(i.useState)(0),l=T()(s,2),u=l[0],f=l[1],d=Object(i.useState)(C(20,2)),p=T()(d,2),h=p[0],v=p[1],m=Object(i.useState)(1),b=T()(m,2),g=b[0],y=b[1],w=Object(i.useState)(!1),j=T()(w,2),O=j[0],N=j[1],S=Object(i.useState)(!1),x=T()(S,2),E=x[0],P=x[1],L=Object(i.useState)(!1),A=T()(L,2),M=A[0],B=A[1],U=Object(i.useState)("card1"),F=T()(U,2),D=F[0],H=F[1],z=Object(i.useState)(1),G=T()(z,2),W=G[0],J=G[1],q=Object(i.useState)(0),$=T()(q,2),V=$[0],Y=$[1],K=Object(i.useState)(_),X=T()(K,2),Q=X[0],Z=X[1];function ee(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:g;Z((function(r){return k(k({},r),{},I()({},n,k(k({},r[n]),{},I()({},e,r[n][e]+t))))}))}function te(e){f(0),ee("moves",1),e?setTimeout((function(){v((function(e){return e.map((function(e){return k(k({},e),{},{isSelected:!1})}))})),2===W&&y((function(e){return 1===e?e+1:e-1}))}),2e3):ee("matched",1)}return Object(i.useEffect)((function(){2===u&&function(){var e=h.filter((function(e){return e.isSelected}));if(2===e.length){var t=e[0].tileId;e.every((function(e){return e.tileId===t}))?setTimeout((function(){v((function(e){return e.map((function(e){return e.tileId!==t?e:k(k({},e),{},{isMatched:!0,isSelected:!1})}))})),c((function(e){return e-1})),te()}),1e3):te(!0)}}()}),[u]),Object(i.useEffect)((function(){0===a&&(Q[1].matched>Q[2].matched?Y(1):Q[2].matched>Q[1].matched?Y(2):Y(0),P(!0),B(!1),y(0))}),[a,V,Q]),o()(R.Provider,{value:{tileLocationObj:h,handleSelect:function(e){var t=e.isMatched,n=e.position,r=h.filter((function(e){return e.isSelected}));0===Q[1].moves&&(N(!0),B(!0)),u<2&&!t&&r.length<2&&(v((function(e){return e.map((function(e){return e.position!==n?e:k(k({},e),{},{isSelected:!0})}))})),f((function(e){return e+1})))},playerObj:Q,currentPlayer:g,setGameStarted:N,gameStarted:O,timerIsActive:M,updatePlayer:ee,setTileBg:H,tileBg:D,setPlayerNumber:J,playerNumber:W,gameEnded:E,winner:V,newGame:function(){P(!1),N(!1),Z(_),c(10),v(C(20,2)),y(1),Y(0),f(0)}}},void 0,t)}var A=n(13),M=n.n(A),B=[{tileSetId:1,stored:"assets",name:"Default set 1"},{tileSetId:2,stored:"assets",name:"Default set 2"},{tileSetId:3,stored:"assets",name:"Default set 3"}],U=[{tileSetId:1,tileId:1,fileName:"1_1.jpg"},{tileSetId:1,tileId:2,fileName:"1_2.jpg"},{tileSetId:1,tileId:3,fileName:"1_3.jpg"},{tileSetId:1,tileId:4,fileName:"1_4.jpg"},{tileSetId:1,tileId:5,fileName:"1_5.jpg"},{tileSetId:1,tileId:6,fileName:"1_6.jpg"},{tileSetId:1,tileId:7,fileName:"1_7.jpg"},{tileSetId:1,tileId:8,fileName:"1_8.jpg"},{tileSetId:1,tileId:9,fileName:"1_9.jpg"},{tileSetId:1,tileId:10,fileName:"1_10.jpg"},{tileSetId:2,tileId:1,fileName:"2_1.jpg"},{tileSetId:2,tileId:2,fileName:"2_2.jpg"},{tileSetId:2,tileId:3,fileName:"2_3.jpg"},{tileSetId:2,tileId:4,fileName:"2_4.jpg"},{tileSetId:2,tileId:5,fileName:"2_5.jpg"},{tileSetId:2,tileId:6,fileName:"2_6.jpg"},{tileSetId:2,tileId:7,fileName:"2_7.jpg"},{tileSetId:2,tileId:8,fileName:"2_8.jpg"},{tileSetId:2,tileId:9,fileName:"2_9.jpg"},{tileSetId:2,tileId:10,fileName:"2_10.jpg"},{tileSetId:3,tileId:1,fileName:"3_1.jpg"},{tileSetId:3,tileId:2,fileName:"3_2.jpg"},{tileSetId:3,tileId:3,fileName:"3_3.jpg"},{tileSetId:3,tileId:4,fileName:"3_4.jpg"},{tileSetId:3,tileId:5,fileName:"3_5.jpg"},{tileSetId:3,tileId:6,fileName:"3_6.jpg"},{tileSetId:3,tileId:7,fileName:"3_7.jpg"},{tileSetId:3,tileId:8,fileName:"3_8.jpg"},{tileSetId:3,tileId:9,fileName:"3_9.jpg"},{tileSetId:3,tileId:10,fileName:"3_10.jpg"}];var F=function(e){var t=Object(i.useState)((function(){var t;try{t=JSON.parse(JSON.parse(localStorage.getItem("tileSets")||e))}catch(n){t=e}return t})),n=T()(t,2),r=n[0],o=n[1];return Object(i.useEffect)((function(){localStorage.setItem("tileSets",JSON.stringify(JSON.stringify(r)))}),[r]),[r,o]};var D=function(e){var t=Object(i.useState)((function(){var t;try{t=JSON.parse(JSON.parse(localStorage.getItem("tileItems")||e))}catch(n){t=e}return t})),n=T()(t,2),r=n[0],o=n[1];return Object(i.useEffect)((function(){localStorage.setItem("tileItems",JSON.stringify(JSON.stringify(r)))}),[r]),[r,o]},H=a.a.createContext();function z(e){var t=e.children,n=Object(i.useState)(1),r=T()(n,2),a=r[0],c=r[1],s=F(B),l=T()(s,2),u=l[0],f=l[1],d=D(U),p=T()(d,2),h=p[0],v=p[1];function m(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a,t=h.filter((function(t){return t.tileSetId===Number(e)}));return t}function b(e,t,n){v((function(n){return n.filter((function(n){return n.tileSetId!==Number(t)||n.tileId!==Number(e)}))})),localStorage.removeItem(n)}return o()(H.Provider,{value:{tileSetObj:u,tileItemObj:h,getSelectedTileSet:function(){return u.find((function(e){return e.tileSetId===a}))},setSelectedTileSet:c,addTileSet:function(e){var t=u.reduce((function(e,t){return e.tileSetId>t.tileSetId?e.tileSetId:t.tileSetId}));f((function(n){return[].concat(M()(n),[{tileSetId:t+1,stored:"local",name:e}])}))},deleteTileSet:function(e){f((function(t){return t.filter((function(t){return t.tileSetId!==Number(e)}))})),m(e).forEach((function(e){return b(e.tileId,e.tileSetId,e.fileName)}))},getMaxTileId:function(e){var t=m(e);return t.length>0?Math.max.apply(Math,M()(t.map((function(e){return e.tileId}))).concat([0])):0},getTiles:m,addTile:function(e,t){var n={tileId:Number(e),tileSetId:Number(t),fileName:"".concat(t,"_").concat(e)};v((function(e){return[].concat(M()(e),[n])}))},deleteTile:b}},void 0,t)}var G=n.p+"40252bcec8cb05b0ae54cffb0373cece.png",W=o()("nav",{className:"navbar navbar-expand navbar-dark bg-dark"},void 0,o()("div",{className:"container"},void 0,o()(j,{className:"navbar-brand",exact:"true",to:"/"},void 0,o()("img",{src:G,height:"30px",alt:""})),o()("ul",{className:"navbar-nav mr-auto"},void 0,o()("li",{className:"nav-item"},void 0,o()(S,{activeClassName:"active",className:"nav-link",exact:!0,to:"/"},void 0,"Game")),o()("li",{className:"nav-item"},void 0,o()(S,{activeClassName:"active",className:"nav-link",to:"/customizer"},void 0,"Customize Tiles")))));var J=function(){return W},q=o()("footer",{className:"bg-light d-block py-1 mt-auto"},void 0,o()("span",{className:"row text-muted small justify-content-center no-gutters"},void 0,"Memory! | made with",o()("span",{role:"img","aria-label":"love",className:"px-1"},void 0,"\ud83d\udc96"),"by Tino (",o()("a",{href:"https://github.com/tino-web/memory",target:"_blank",rel:"noreferrer noopener"},void 0,"GitHub"),")"));var $=function(){return q},V=n(11),Y=n.n(V);function K(e){var t=e.setId,n=e.fileName,r=e.tileId,c=e.show,s=e.setShow,l=Object(i.useContext)(H).deleteTile;function u(e){e?l(r,t,n):s(!1)}return Object(i.useEffect)((function(){return function(){s(!1)}})),a.a.createElement(a.a.Fragment,null,o()(Y.a,{show:c,type:"confirm",message:"Are you sure you want to delete this tile?",onSuccess:function(){return u(!0)},onCancel:function(){return u(!1)},onClose:function(){return u(!1)},successClassNames:"btn-success"}))}var X=K;K.defaultProps={setId:null,fileName:null};var Q=o()("svg",{width:"3em",height:"3em",viewBox:"0 0 16 16",className:"bi bi-cloud-arrow-up-fill text-secondary",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},void 0,o()("path",{fillRule:"evenodd",d:"M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 5.146l-2-2a.5.5 0 0 0-.708 0l-2 2a.5.5 0 1 0 .708.708L7.5 6.707V10.5a.5.5 0 0 0 1 0V6.707l1.146 1.147a.5.5 0 0 0 .708-.708z"}));function Z(e){var t,r=e.id,a=e.setId,c=e.fileName,s=e.tileFileStored,l=e.clickHandler,u=Object(i.useState)(!1),f=T()(u,2),d=f[0],p=f[1],h=null===c,v=!l&&!h&&"assets"===s;return t=h||"assets"!==s?h||"local"!==s?"":localStorage.getItem(c):n(15)("./".concat(c)),o()("div",{className:"col-4 pb-3",style:{height:"85px"}},void 0,o()(X,{setId:a,fileName:c,tileId:r,show:d,setShow:p}),o()("button",{className:"customizerTileBtn",type:"button",disabled:v,onClick:function(){l||h?l(r):"local"===s&&p(!0)}},void 0,h?Q:o()("img",{className:"tileImg",src:"assets"===s?t.default:t,alt:""})))}var ee=Z;Z.defaultProps={setId:null,fileName:null,clickHandler:null};var te=n(18),ne=n.n(te),re=n(28),oe=n.n(re),ie=function(e){var t=new FileReader;return t.readAsDataURL(e),new Promise((function(e,n){t.onload=function(r){var o=new Image;o.src=r.target.result,o.onload=function(){var t=o.width>=o.height?"landscape":"portrait",n=o.height/o.width,r=n<=.625?.625*o.width:o.width,i=n<=.625?o.height:.625*o.width,a="landscape"===t?0:o.height/2-i/2,c=document.createElement("canvas");c.width=160,c.height=100;var s=c.getContext("2d");s.drawImage(o,0,a,r,i,0,0,160,100);var l=s.canvas.toDataURL("image/png",1).replace("image/png","image/octet-stream");e(l)},t.onerror=function(e){return n(e)}}}))},ae=o()("div",{className:"input-group-append"},void 0,o()("button",{className:"btn btn-secondary btn-sm",type:"submit"},void 0,o()("svg",{width:"1.2em",height:"1.2em",viewBox:"0 0 16 16",className:"bi bi-cloud-arrow-up-fill",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},void 0,o()("path",{fillRule:"evenodd",d:"M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 5.146l-2-2a.5.5 0 0 0-.708 0l-2 2a.5.5 0 1 0 .708.708L7.5 6.707V10.5a.5.5 0 0 0 1 0V6.707l1.146 1.147a.5.5 0 0 0 .708-.708z"}))));var ce=function(e){var t=e.setId,n=e.show,r=Object(i.useContext)(H),c=r.getMaxTileId,s=r.addTile,l=Object(i.useState)(""),u=T()(l,2),f=u[0],d=u[1],p=Object(i.useRef)(null),h=n?"block":"none";function v(){return(v=oe()(ne.a.mark((function e(n){var r,o,i,a,l;return ne.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),r=c(t)+1,o=0;case 3:if(!(o<p.current.files.length)){e.next=21;break}if(!(r+o<=10)){e.next=18;break}return e.prev=5,i=p.current.files[o],e.next=9,ie(i);case 9:a=e.sent,l="".concat(t,"_").concat(r+o),localStorage.setItem(l,a),s(r+o,t),e.next=18;break;case 15:return e.prev=15,e.t0=e.catch(5),e.abrupt("return",e.t0);case 18:o+=1,e.next=3;break;case 21:return p.current.value="",d(""),e.abrupt("return",null);case 24:case"end":return e.stop()}}),e,null,[[5,15]])})))).apply(this,arguments)}return o()("div",{className:"col-12",style:{display:h}},void 0,o()("form",{onSubmit:function(e){return v.apply(this,arguments)}},void 0,o()("div",{className:"input-group"},void 0,o()("div",{className:"custom-file",style:{height:"inherit"}},void 0,a.a.createElement("input",{ref:p,type:"file",className:"custom-file-input form-control-sm",onChange:function(e){for(var t=[],n=0;n<e.target.files.length;n+=1)t.push(e.target.files[n].name);d(t.join(", "))},multiple:!0,id:"fileInput",required:!0}),o()("label",{className:"custom-file-label form-control-sm",id:"fileLabel",htmlFor:"fileInput",style:{overflow:"hidden"}},void 0,f||"Choose files")),ae)))},se=o()("div",{className:"input-group-append"},void 0,o()("button",{type:"submit",className:"btn btn-secondary btn-sm"},void 0,o()("svg",{width:"1.2em",height:"1.2em",viewBox:"0 0 16 16",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},void 0,o()("path",{fillRule:"evenodd",d:"M9.828 4H2.19a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91H9v1H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181L15.546 8H14.54l.265-2.91A1 1 0 0 0 13.81 4H9.828zm-2.95-1.707L7.587 3H2.19c-.24 0-.47.042-.684.12L1.5 2.98a1 1 0 0 1 1-.98h3.672a1 1 0 0 1 .707.293z"}),o()("path",{fillRule:"evenodd",d:"M13.5 10a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1H13v-1.5a.5.5 0 0 1 .5-.5z"}),o()("path",{fillRule:"evenodd",d:"M13 12.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0v-2z"}))));var le=function(){var e=Object(i.useContext)(H).addTileSet,t=Object(i.useState)(""),n=T()(t,2),r=n[0],a=n[1];return o()("form",{onSubmit:function(t){t.preventDefault(),e(r),a("")}},void 0,o()("div",{className:"input-group"},void 0,o()("input",{type:"text",name:"newSet",value:r,required:!0,onChange:function(e){return a(e.target.value)},className:"form-control form-control-sm",placeholder:"Enter set name",maxLength:"18"}),se))};var ue=function(e){var t=e.setId,n=Object(i.useState)(!1),r=T()(n,2),c=r[0],s=r[1],u=Object(l.g)(),f=Object(i.useContext)(H).deleteTileSet;function d(e){e?(f(t),u.push("/customizer")):s(!1)}return Object(i.useEffect)((function(){return function(){s(!1)}})),a.a.createElement(a.a.Fragment,null,o()("button",{className:"btn btn-secondary btn-sm text-uppercase",type:"button",onClick:function(){return s(!0)}},void 0,"Delete"),o()(Y.a,{show:c,type:"confirm",message:"Are you sure you want to delete this set?",onSuccess:function(){return d(!0)},onCancel:function(){return d(!1)},onClose:function(){return d(!1)},successClassNames:"btn-success"}))},fe=o()(j,{className:"btn btn-secondary btn-sm",to:"/customizer"},void 0,"Back"),de=o()(le,{});var pe=function(){var e,t,n,r=Object(i.useContext)(H),c=r.tileSetObj,s=r.getTiles,u=Object(l.g)(),f=Object(l.h)(),d=f.type,p=f.id;function h(e){u.push("/customizer/set/".concat(e))}"set"===d&&(e=c.find((function(e){return e.tileSetId===Number(p)}))),t=e?(n=s(e.tileSetId)).map((function(t){return o()(ee,{tileFileStored:e.stored,fileName:t.fileName,setId:Number(p),id:t.tileId},"tile_".concat(t.tileId))})):c.map((function(e){return n=s(e.tileSetId),o()(ee,{clickHandler:h,tileFileStored:e.stored,fileName:n[0]?n[0].fileName:null,id:e.tileSetId},"set_".concat(e.tileSetId))}));var v=e?e.name:"Your Tile Sets";return a.a.createElement(a.a.Fragment,null,o()("div",{className:"row bg-secondary border rounded-top border-bottom-0 pt-1 pb-1",style:{height:"40px"}},void 0,o()("div",{className:"col-3 text-uppercase pl-1 my-auto"},void 0,e&&fe),o()("div",{className:"col-6 px-0 text-center my-auto text-uppercase text-white"},void 0,o()("span",{style:{fontWeight:"700",fontSize:"1rem",overflow:"hidden"}},void 0,v)),o()("div",{className:"col-3 my-auto pr-1 text-uppercase text-right"},void 0,e&&"assets"!==e.stored&&o()(ue,{setId:Number(p)}))),o()("div",{className:"row justify-content-center bg-light border border-bottom-0 border-top-0 pt-3"},void 0,t),o()("div",{className:"row bg-light border justify-content-center rounded-bottom border-top-0 pb-2"},void 0,e&&o()(ce,{setId:Number(p),show:n.length<10}),!e&&de))};n(77);var he=function(){var e=Object(l.i)().path;return o()("div",{className:"container"},void 0,o()("div",{className:"row justify-content-center"},void 0,o()("div",{className:"col pt-4",style:{maxWidth:"400px"}},void 0,o()(l.d,{},void 0,o()(l.b,{path:"".concat(e,"/:type/:id"),component:pe}),o()(l.b,{path:"".concat(e),component:pe})))))};var ve=function(e){var t=e.playerNumber,n=e.hideRow,r=e.inputRef,c=Object(i.useState)(""),s=T()(c,2),l=s[0],u=s[1];return o()("div",{className:"row justify-content-center bg-light border border-bottom-0 border-top-0 showRow ".concat(n?"hideRow":""),style:{height:"50px"}},void 0,o()("div",{className:"col-3 my-auto text-right"},void 0,"Player ".concat(t,":")),o()("div",{className:"col-6 my-auto"},void 0,a.a.createElement("input",{type:"text",value:l,className:"form-control",onChange:function(e){return u(e.target.value)},placeholder:"Enter name",required:!n,ref:r,maxLength:"15"})))},me=n(29),be=n.n(me),ge=o()("div",{className:"col-5 my-auto text-right"},void 0,"1 Player"),ye=o()("div",{className:"col-5 my-auto"},void 0,"2 Player");var we=function(e){var t=e.playerToggle,n=e.setPlayerToggle;return o()("div",{className:"row justify-content-center bg-light border rounded-top border-bottom-0 pt-3",style:{height:"70px"}},void 0,ge,o()("div",{className:"col-2 p-0 my-auto text-center"},void 0,o()(be.a,{onChange:function(e){return n(e)},checked:t,onlabel:"1P",offlabel:"2P",style:"switch",onstyle:"light",offstyle:"light"})),ye)};var je=function(e){var t=e.cardBgName,r=e.cardBg,i=e.setCardBg,a=n(78)("./setup_".concat(t,".png"));return o()("div",{className:"col-4 my-auto"},void 0,o()("label",{htmlFor:t},void 0,o()("img",{src:a.default,alt:"",className:"w-100"}),o()("input",{type:"radio",id:t,value:t,checked:r===t,name:"cardBg",onChange:function(e){return i(e.target.id)}})))};var Oe=function(e){var t,r=e.id,i=e.fileName,a=e.tileFileStored,c=e.selectSet,s=e.setSelectSet;return t="assets"===a?n(15)("./".concat(i)):"local"===a?localStorage.getItem(i):"",o()("div",{className:"col-4 pb-3",style:{height:"100px"}},void 0,o()("label",{htmlFor:r},void 0,o()("img",{className:"tileImgSetup customizerTileBtn",src:"assets"===a?t.default:t,alt:""}),o()("input",{type:"radio",id:r,value:r,checked:c===r,name:"radioSet",onChange:function(e){return s(Number(e.target.id))}})))},Ne=o()("div",{className:"col-5 my-auto text-center"},void 0,o()("input",{type:"submit",className:"btn orange border",value:"Start Game"}));var Se=function(){var e=Object(i.useContext)(R),t=e.setGameStarted,n=e.setTileBg,r=e.setPlayerNumber,c=e.updatePlayer,s=Object(i.useContext)(H),l=s.tileSetObj,u=s.getTiles,f=s.setSelectedTileSet,d=Object(i.useRef)(null),p=Object(i.useRef)(null),h=Object(i.useState)(!0),v=T()(h,2),m=v[0],b=v[1],g=Object(i.useState)("card1"),y=T()(g,2),w=y[0],j=y[1],O=Object(i.useState)(1),N=T()(O,2),S=N[0],x=N[1],I=l.map((function(e){var t=u(e.tileSetId);return 10===t.length?o()(Oe,{tileFileStored:e.stored,fileName:t[0]?t[0].fileName:null,id:e.tileSetId,selectSet:S,setSelectSet:x},"set_".concat(e.tileSetId)):null}));return a.a.createElement(a.a.Fragment,null,o()("form",{onSubmit:function(e){e.preventDefault(),c("name",d.current.value,1),c("name",p.current.value,2),r(m?1:2),n(w),f(S),t(!0)}},void 0,o()("div",{className:"row justify-content-center"},void 0,o()("div",{className:"col pt-4",style:{maxWidth:"400px"}},void 0,o()("div",{className:"row pb-3"},void 0,o()("img",{src:G,className:"mx-auto d-block",style:{width:"400px",height:"93px"},alt:"Memory"})),o()(we,{playerToggle:m,setPlayerToggle:b}),o()(ve,{playerNumber:"1",hideRow:!1,inputRef:d}),o()(ve,{playerNumber:"2",hideRow:m,inputRef:p}),o()("div",{className:"row justify-content-center bg-light border border-bottom-0 border-top-0 text-center",style:{height:"180px"}},void 0,o()(je,{cardBgName:"card1",cardBg:w,setCardBg:j}),o()(je,{cardBgName:"card2",cardBg:w,setCardBg:j}),o()(je,{cardBgName:"card3",cardBg:w,setCardBg:j})),o()("div",{className:"row justify-content-center bg-light border border-bottom-0 border-top-0 text-center"},void 0,I),o()("div",{className:"row justify-content-center bg-light border rounded-bottom border-top-0 pb-4",style:{height:"50px"}},void 0,Ne)))))};var xe=function(e){var t,r=e.tileLocationData,i=e.tileData,a=e.handleClick,c=e.tileBg,s=e.tileFileStored,l=n(79)("./".concat(c,".png"));return"assets"===s?t=n(15)("./".concat(i.fileName)):"local"===s&&(t=localStorage.getItem(i.fileName)),o()("div",{className:"scene"},void 0,o()("div",{className:"tile ".concat(r.isSelected&&"isTurned"," ").concat(r.isMatched&&"isTurned isMatched")},void 0,o()("div",{className:"face front"},void 0,o()("button",{type:"button",className:"tileBtn",onClick:function(){return a(r)}},void 0,o()("img",{src:l.default,alt:"",className:"tileImg"}))),o()("div",{className:"face back"},void 0,o()("img",{className:"tileImg",src:"assets"===s?t.default:t,alt:""}))))};var Ie=function(){var e=Object(i.useContext)(H),t=e.getTiles,n=e.getSelectedTileSet,r=Object(i.useContext)(R),a=r.tileLocationObj,c=r.handleSelect,s=r.tileBg,l=n().stored,u=t(),f=a.map((function(e){var t=u.find((function(t){return t.tileId===e.tileId}));return o()(xe,{tileData:t,handleClick:c,tileLocationData:e,tileBg:s,tileFileStored:l},e.position)}));return o()("div",{className:"d-flex justify-content-center"},void 0,o()("div",{className:"tilesGrid mt-3"},void 0,f))},Ee=n(30),Te=o()(Ee.a,{effect:"solid"}),_e=o()("div",{className:"row text-uppercase"},void 0,o()("div",{className:"col"},void 0,o()("small",{className:"tooltipper","data-tip":"Number of moves played"},void 0,"Moves")),o()("div",{className:"col"},void 0,o()("small",{className:"tooltipper","data-tip":"Score divided by moves"},void 0,"Acc.")));var Ce=function(e){var t=e.playerObj,n=e.player,r=e.isPlaying,i=e.isWinner,a=Math.floor(t.matched/t.moves*100)||0;return o()("div",{className:"col-5 text-center"},void 0,Te,o()("div",{className:"row"},void 0,o()("div",{className:"col text-uppercase my-auto pt-1 ".concat("1"===n?"top-left-radius":"top-right-radius"," ").concat(r&&"isPlaying"," ").concat(i&&"isWinner"),style:{height:"35px"}},void 0,o()("span",{style:{fontWeight:"700",fontSize:"1.1rem"}},void 0,t.name))),o()("div",{className:"row"},void 0,o()("div",{className:"col"},void 0,o()("span",{style:{fontWeight:"700",fontSize:"3rem",lineHeight:"3.5rem"}},void 0,t.matched))),o()("div",{className:"row"},void 0,o()("div",{className:"col text-uppercase"},void 0,o()("span",{style:{fontWeight:"700",fontSize:"1rem",lineHeight:"2rem"}},void 0,"Player ".concat(n)))),_e,o()("div",{className:"row"},void 0,o()("div",{className:"col"},void 0,t.moves),o()("div",{className:"col"},void 0,"".concat(a,"%"))))};var Pe=function(){var e=Object(i.useState)(0),t=T()(e,2),n=t[0],r=t[1],o=Object(i.useContext)(R).timerIsActive,c="".concat(Math.floor(n/60),":").concat("0".concat(Math.floor(n%60)).slice(-2));return Object(i.useEffect)((function(){var e=null;return o?e=setInterval((function(){r((function(e){return e+1}))}),1e3):o||0===n||clearInterval(e),function(){return clearInterval(e)}}),[o,n]),a.a.createElement(a.a.Fragment,null,c)},ke=o()("div",{className:"row"},void 0,o()("div",{className:"col pt-1"},void 0,o()("h4",{},void 0,o()(Pe,{}))));var Re=function(){var e=Object(i.useContext)(R),t=e.playerObj,n=e.currentPlayer,r=e.playerNumber,a=e.winner,c=e.newGame;return o()("div",{className:"row justify-content-center mt-3"},void 0,o()("div",{className:"col border rounded bg-light",style:{maxWidth:"400px"}},void 0,o()("div",{className:"row"},void 0,o()(Ce,{player:"1",isPlaying:1===n&&!0,playerObj:t[1],isWinner:1===a&&!0}),o()("div",{className:"col-2 p-0 text-center"},void 0,ke,o()("div",{className:"row"},void 0,o()("div",{className:"col my-auto"},void 0,o()("span",{style:{fontSize:"2.5rem"}},void 0,2===r?"vs":" "))),o()("div",{className:"row"},void 0,o()("div",{className:"col my-auto align-self-end"},void 0,o()("button",{className:"btn btn-light border btn-sm",type:"button",onClick:function(){c()}},void 0,"RESET")))),2===r?o()(Ce,{player:"2",isPlaying:2===n&&!0,playerObj:t[2],isWinner:2===a&&!0}):"")))};var Le=function(){var e,t,n=Object(i.useContext)(R),r=n.winner,c=n.playerObj,s=n.newGame,l=n.playerNumber;return 0===r?(e="it's a DRAW!",t="https://media.giphy.com/media/3ov9jKR2g36eWaTvXi/giphy.gif"):1===l?(e="You are a winner!",t="https://media.giphy.com/media/UWz1UFHrJIrDvF7dR4/giphy.gif"):(e="".concat(c[r].name," wins!"),t="https://media.giphy.com/media/26u4cqiYI30juCOGY/giphy.gif"),a.a.createElement(a.a.Fragment,null,o()("div",{className:"row justify-content-center"},void 0,o()("div",{className:"col pt-4 text-center",style:{maxWidth:"400px"}},void 0,o()("div",{className:"row bg-light border rounded-top border-bottom-0 pt-4",style:{height:"70px"}},void 0,o()("div",{className:"col my-auto"},void 0,o()("h2",{},void 0,e))),o()("div",{className:"row bg-light border border-bottom-0 border-top-0",style:{height:"200px"}},void 0,o()("div",{className:"col my-auto"},void 0,o()("img",{src:t,width:"300px",alt:""}))),o()("div",{className:"row bg-light border rounded-bottom border-top-0 pb-4",style:{height:"55px"}},void 0,o()("div",{className:"col my-auto"},void 0,o()("button",{type:"button",className:"btn orange border",onClick:s},void 0,"New Game"))))))},Ae=(n(83),o()(Se,{})),Me=o()(Ie,{}),Be=o()(Re,{}),Ue=o()(Le,{}),Fe=o()(Re,{});var De=function(){var e,t=Object(i.useContext)(R),n=t.gameStarted,r=t.gameEnded,c=t.newGame;return Object(i.useEffect)((function(){return function(){return c()}}),[]),n||r?n&&!r?e=a.a.createElement(a.a.Fragment,null,Me,Be):n&&r&&(e=a.a.createElement(a.a.Fragment,null,Ue,Fe)):e=a.a.createElement(a.a.Fragment,null,Ae),o()("div",{className:"container"},void 0,o()(l.a,{when:n&&!r,message:"Are you sure you want to leave your game?"}),e)},He=o()("div",{className:"container-fluid d-flex flex-column p-0 min-vh-100"},void 0,o()(J,{}),o()(l.d,{},void 0,o()(l.b,{path:"/customizer",component:he}),o()(l.b,{path:"/",component:De})),o()($,{}));var ze=function(){return He};s.a.render(o()(a.a.StrictMode,{},void 0,o()(v,{basename:"/"},void 0,o()(L,{},void 0,o()(z,{},void 0,o()(ze,{}))))),document.getElementById("root"))}],[[84,1,2,9,4,8,6,7,5,10,3]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,